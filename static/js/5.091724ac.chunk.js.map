{"version":3,"sources":["components/layout/Paper.tsx","features/transactions/components/TransactionTypeTabs.tsx","services/database/firebase/firebaseUtils.ts","services/database/firebase/firebase.ts","components/utils/types.ts","services/database/database.ts","utils/strings.ts","services/wallets/bsc.ts","features/wallet/walletHooks.ts","features/transactions/transactionsHooks.ts","utils/formatters.ts","components/formatting/NumberFormatText.tsx","components/inputs/InputHelpers.tsx","components/utils/Debug.tsx","features/wallet/walletUtils.ts","features/fees/feesHooks.ts","components/modals/BridgeModal.tsx","utils/dates.ts","features/transactions/components/TransactionsHelpers.tsx","features/mint/components/MintHelpers.tsx","features/transactions/components/TransactionFees.tsx","features/ui/uiHooks.ts","features/mint/steps/MintFeesStep.tsx","components/dropdowns/AssetDropdown.tsx","theme/themeUtils.ts","components/inputs/BigCurrencyInput.tsx","features/mint/steps/MintInitialStep.tsx","components/wallet/WalletHelpers.tsx","features/notifications/components/NotificationsHelpers.tsx","features/notifications/notificationsUtils.ts","features/transactions/components/TransactionMenu.tsx","features/mint/components/MintStatuses.tsx","features/mint/components/MultipleDepositsHelpers.tsx","features/mint/mintHooks.ts","features/mint/steps/MintProcessStep.tsx","features/mint/MintFlow.tsx","features/release/components/ReleaseHelpers.tsx","features/release/steps/ReleaseFeesStep.tsx","components/inputs/AddressInput.tsx","features/release/steps/ReleaseInitialStep.tsx","features/release/components/ReleaseStatuses.tsx","features/release/releaseHooks.ts","features/release/steps/ReleaseProcessStep.tsx","features/release/ReleaseFlow.tsx","features/network/networkUtils.ts","components/pagination/SimplePagination.tsx","components/transactions/TransactionsGrid.tsx","features/mint/components/MintHistoryHelpers.tsx","features/release/components/ReleaseHistoryHelpers.tsx","features/transactions/components/TransactionHistoryHelpers.tsx","features/transactions/TransactionHistory.tsx","providers/multiwallet/Multiwallet.tsx","pages/MainLayout.tsx","pages/MainPage.tsx","features/marketData/marketDataHooks.ts"],"names":["useBridgePaperStyles","makeStyles","theme","root","maxWidth","margin","position","overflow","BridgePurePaper","shaking","className","props","classes","shakingStyles","useShakingStyles","resolvedClassName","classNames","Paper","BridgePaperWrapper","styled","marginTop","getPadding","variant","usePaperContentStyles","paddingLeft","paddingVariant","paddingRight","top","paddingTop","bottom","paddingBottom","darker","backgroundColor","customColors","whiteDarker","PaperContent","topPadding","bottomPadding","children","styles","PaperHeader","display","justifyContent","alignItems","PaperNav","justifySelf","minWidth","PaperActions","marginLeft","marginRight","PaperTitle","textAlign","width","useSpacedContentStyles","minHeight","rootSmaller","SpacedPaperContent","smaller","rest","TransactionTypeTabs","history","useHistory","path","useRouteMatch","onTabChange","useCallback","event","newPath","push","Tabs","value","onChange","indicatorColor","Tab","label","paths","MINT","RELEASE","require","createOrUpdateProfileData","db","uid","a","doc","collection","get","docData","exists","update","updated","firebase","firestore","Timestamp","fromDate","Date","now","set","signatures","console","error","signInOrRegister","id","signature","token","functions","httpsCallable","signed","account","res","data","Error","auth","signInWithCustomToken","user","getFirebaseUser","address","currentUser","signOut","rawSignature","env","FIREBASE_KEY","warn","initializeApp","apiKey","authDomain","window","location","hostname","projectId","FIREBASE_PROJECT_ID","WalletStatus","addTx","tx","localWeb3Address","fsSignature","timestamps","dbTx","created","toLowerCase","walletSignature","createdSeconds","seconds","JSON","stringify","catch","e","updateTx","deleteTx","deleted","getTx","then","parse","getTxs","where","fsDataSnapshot","fsTransactions","empty","forEach","getUser","this","trimAddress","chars","length","start","slice","end","vowels","split","getBinanceChain","BinanceChain","signWithBinanceChain","msg","Promise","resolve","reject","request","method","addresses","from","params","enable","useWallet","chain","useMultiwallet","enabledChains","targetNetwork","activateConnector","setTargetNetwork","status","provider","symbol","isMetaMask","BridgeWallet","METAMASKW","chainId","indexOf","BINANCESMARTW","UNKNOWNW","resolveWallet","deactivateConnector","connector","deactivate","walletConnected","CONNECTED","useSelectedChainWallet","multiwalletChain","useSelector","$multiwalletChain","SIGN_MESSAGE","getWeb3Signatures","web3","localSigMap","localStorage","getItem","storageKeys","SIG_MAP","localRawSigMap","RAW_SIG_MAP","addressLowerCase","RenChain","ethereum","currentProvider","connection","info","eth","personal","sign","utils","utf8ToHex","binanceSmartChain","setItem","sha3","useSignatures","dispatch","useDispatch","useMemo","Web3","useWeb3","getSignatures","debug","setSignatures","settingUser","userData","setUser","useAuthentication","$walletUser","isAuthenticating","$isAuthenticating","isAuthenticated","authenticate","useAuthRequired","authRequired","useEffect","setAuthRequired","useTransactionDeletion","showNotification","useNotifications","useState","menuOpened","setMenuOpened","handleMenuClose","handleMenuOpen","handleDeleteTx","removeTransaction","type","TxType","useRenNetworkTracker","currency","renChain","renNetwork","$renNetwork","networkMapping","getCurrencyConfig","networkMappings","newNetwork","isTestnetNetwork","testnet","isMainnetNetwork","mainnet","setRenNetwork","useSetCurrentTxId","currentId","$currentTxId","setCurrentTxId","numberFormatOptions","thousandSeparator","allowLeadingZeros","allowNegative","allowedDecimalSeparators","NumberFormatText","spacedSuffix","suffix","resolvedSuffix","displayType","CheckboxWrapper","useStyles","background","wrapper","height","wrapperEnabled","replacer","name","val","DebugWrapper","enabled","show","setShow","toggleShow","onClick","Debug","it","force","disable","target","noClick","stopPropagation","DebugComponentProps","isSupportedByCurrentNetwork","currencyConfig","chainMapping","getAssetBalance","balances","balanceEntry","find","entry","balance","feesCache","useFetchFees","txType","mint","burn","lock","release","fees","setFees","pending","setPending","useDebounce","cacheKey","getLockAndMintFees","getBurnAndReleaseFees","feeRates","useBridgeModalTitleStyles","dialogTitle","borderBottom","palette","divider","titleWrapper","flexGrow","title","customContentWrapper","closeButtonWrapper","closeButton","color","grey","BridgeModalTitle","onClose","disableTypography","Typography","IconButton","aria-label","fontSize","BridgeModal","open","Dialog","useNestedDrawerStyles","backdrop","right","left","zIndex","positioner","paper","NestedDrawer","Backdrop","dateOptions","timeZone","timeOptions","hour12","timeZoneName","getFormattedDateTime","timestamp","dateObject","date","toLocaleDateString","navigator","language","time","toLocaleTimeString","pad","String","padStart","getFormattedHMS","milliseconds","Math","floor","minutes","hours","millisecondsToHMS","ProcessingTimeWrapper","marginBottom","BookmarkPageWarning","onClosed","setOpen","handleClose","align","gutterBottom","ProgressStatus","reason","processing","useTheme","usePaperTitle","setTitle","primary","main","HMSCountdown","count","setCount","useInterval","ms","ErrorIconWrapper","lineHeight","textLight","ErrorDialog","actionText","onAction","component","SubmitErrorDialog","GeneralErrorDialog","external","href","links","BUGS_LOG","underline","ExpiredErrorDialog","goToHome","HOME","Button","WarningDialog","mainActionText","onMainAction","mainActionDisabled","alternativeActionText","onAlternativeAction","alternativeActionDisabled","showMainAction","disabled","WrongAddressWarningDialog","addressExplorerLink","AuthWarningDialog","mintTooltips","DepositWrapper","AddressValidityMessage","destNetwork","MultipleDepositsMessage","TransactionFees","amount","exchangeRates","$exchangeRates","gasPrices","$gasPrices","currencyUsdRate","findExchangeRate","USD_SYMBOL","gasPrice","findGasPrice","targetChainConfig","getChainConfig","targetChainCurrencyUsdRate","nativeCurrency","amountUsd","getTransactionFees","renVMFee","renVMFeeAmount","networkFee","renVMFeeAmountUsd","networkFeeUsd","sourceCurrency","toReleasedCurrency","sourceCurrencyConfig","sourceCurrencyChainConfig","sourceChain","tooltips","getFeeTooltips","mintFee","releaseFee","feeInGwei","ceil","MINT_GAS_UNIT_COST","targetChainFeeNative","fromGwei","targetChainFeeUsd","targetChainCurrency","labelTooltip","renVmFee","short","decimalScale","valueEquivalent","prefix","fixedDecimalScale","full","sourceChainMinerFee","renCurrencyChainFee","hoverable","useSubNetworkName","flow","useLocation","pathname","useLocationFlow","$chain","mintCurrency","$mintCurrency","releaseCurrency","$releaseCurrency","BridgeChain","ETHC","renCurrency","toMintedCurrency","ethTestnet","EthTestnet","KOVAN","MintFeesStep","onPrev","chainNativeCurrencyConfig","mintingInitialized","setMintingInitialized","$mint","$wallet","network","currentSessionCount","$currentSessionCount","conversionTotal","GreyIcon","targetCurrencyAmountUsd","destinationChainConfig","destinationChainNativeCurrencyConfig","mintDynamicTooltips","acknowledge","mintedCurrency","mintedCurrencyConfig","ackChecked","setAckChecked","touched","setTouched","showAckError","handleAckCheckboxChange","checked","shake","timeout","setPaperShaking","setTimeout","useShakePaper","createMintTransaction","destAddress","mintedCurrencyChain","userAddress","dayIndex","txValid","preValidateMintTransaction","canInitializeMinting","handleConfirm","setWalletPickerOpened","onMintTxCreated","addTransaction","MINT_TRANSACTION","search","createTxQueryString","state","txState","newTx","creatingMintTx","setCreatingMintTx","finally","Divider","Icon","FormControl","FormControlLabel","control","Checkbox","FormLabel","htmlFor","TooltipWithIcon","getOptions","mode","Object","values","chainsConfig","currenciesConfig","iconStyles","useCondensedSelectStyles","select","useAssetDropdownStyles","borderRadius","shape","border","inputRoot","supplementalText","iconWrapper","listIcon","assetName","assetFullName","listSubheader","pointerEvents","listSubheaderLabel","AssetDropdown","available","condensed","condensedSelectClasses","availabilityFilter","option","includes","createAvailabilityFilter","valueRenderer","selected","getOptionBySymbol","EmptyCircleIcon","MainIcon","getAssetData","Box","Select","undefined","renderValue","displayEmpty","MenuProps","anchorOrigin","vertical","horizontal","getContentAnchorEl","ListSubheader","filter","map","MenuItem","key","AssetDropdownWrapper","generatePlaceholderStyles","placeholder","container","fontFamily","large","medium","small","smallest","input","outline","textDark","grayPlaceholder","inputError","errorText","equivalent","BigCurrencyInput","usdValue","ref","useRef","inputRef","replace","size","rootClassName","inputClassName","Boolean","onValueChange","formatValues","getInputRef","current","autoFocus","Numeral","format","toUsdFormat","BigCurrencyInputWrapper","MintInitialStep","onNext","currencyUsdValue","$mintUsdAmount","handleAmountChange","setMintAmount","handleCurrencyChange","setMintCurrency","handleChainChange","setChain","hasMinimalAmount","isMinimalAmount","basicCondition","handleNextStep","mintedCurrencySymbol","supportedLockCurrencies","supportedMintDestinationChains","useWalletPickerStyles","body","padding","header","headerTitle","headerCloseIcon","button","chainTitle","textTransform","useWalletEntryButtonStyles","alignContent","icon","WalletEntryButton","logo","iconClassName","walletConfig","getWalletConfigByRentxName","fullWidth","WalletChainLabel","chainConfig","getChainConfigByRentxName","WalletConnectingInfo","walletSymbol","getWalletConfig","labels","initialTitle","actionTitle","initialMessage","actionMessage","getLabels","useTimeout","passed","isPassed","skyBlueLight","useWalletConnectionProgressStyles","WalletConnectionProgress","redLighter","WalletWrongNetworkInfo","subNetworkName","chainName","networkName","getNetworkConfigByRentxName","createIndicatorClass","createPulseAnimation","pulsingStyles","pulsingKeyframes","useWalletConnectionIndicatorStyles","success","warning","WalletConnectionIndicator","classNameProp","connected","wrongNetwork","WRONG_NETWORK","disconnected","DISCONNECTED","connecting","CONNECTING","useWalletConnectionStatusButtonStyles","common","white","borderColor","boxShadow","defaultShadow","hoisted","tooltip","indicator","indicatorMobile","WalletConnectionStatusButton","wallet","mobile","indicatorClassName","indicatorMobileClassName","accountClassName","hoistedClassName","getWalletConnectionLabel","trimmedAddress","buttonProps","BrowserNotificationsDrawer","onEnable","useBrowserNotifications","onEnabled","Notification","permission","handleEnable","requestPermission","showBrowserNotification","message","onclick","useBrowserNotificationsConfirmation","modalOpened","setModalOpened","handleModalOpen","handleModalClose","useTransactionMenuItemStyles","TransactionMenuItem","dense","ListItemIcon","useTransactionMenuStyles","modalTitle","titleIconWrapper","menuItems","transferId","TransactionMenu","onDeleteTx","confirmOpen","setConfirmOpen","handleConfirmClose","handleDeleteWithConfirm","TxSettingsIcon","AddIcon","DeleteIcon","externalLinkAttributes","ConfirmTransactionDeletionDrawer","deleting","setDeleting","startIcon","MintDepositToStatus","showQr","setShowQr","toggleQr","closeNotification","getRemainingGatewayTime","expiryTime","timeRemained","destChain","persist","getLockAndMintParams","lockCurrencyConfig","lockChainConfig","suggestedAmount","mintAddressLink","useSetPaperTitle","orangeLight","gatewayAddress","Grow","in","getPaymentLink","content","mt","flexDirection","targetConfirmations","blockTime","isTx","link","MintDepositConfirmationStatus","depositHash","lockTxHash","lockTxLink","lockTxAmount","lockConfirmations","lockTargetConfirmations","lockProcessingTime","confirmed","confirmations","MintDepositAcceptedStatus","onSubmit","onReload","submitting","submittingError","useSetActionRequired","actual","mintChainConfig","notificationMessage","useEffectOnce","skyBlue","DestinationPendingStatus","mintTxHash","MintCompletedStatus","mintCurrencyConfig","mintTxLink","handleReturn","resetMint","showNotifications","flexWrap","py","useBigNavButtonStyles","transition","cursor","dark","opacity","hidden","BigNavButton","direction","NavigatePrevIcon","NavigateNextIcon","ButtonBase","DepositPrevButton","DepositNextButton","useMintMachine","mintTransaction","cloneTx","providers","entries","reduce","c","n","machineHook","useMachine","mintMachine","context","sdk","getRenJs","fromChainMap","lockChainMap","toChainMap","mintChainMap","devTools","XSTATE_DEVTOOLS","useMintTransactionPersistence","service","sub","newDbTx","updateTransaction","subscribe","off","useDepositPagination","depositSourceHash","sortedDeposits","transactions","sort","depositSorter","orderedHashes","deposit","sourceTxHash","total","initial","currentHash","setCurrentHash","currentIndex","nextIndex","nextHash","prevIndex","prevHash","handleNext","handlePrev","MintProcessStep","useTxParam","parsedTx","reloading","setReloading","setTx","usePageTitle","getTxPageTitle","paperTitle","setPaperTitle","handlePreviousStepClick","goBack","reloadTx","Number","targetAmount","activeAmount","setActiveAmount","handleActiveAmountChange","newAmount","bridgeChainConfig","handleWalletPickerOpen","onBookmarkWarningClosed","showTransactionStatus","feeCurrency","getCurrencyConfigByRentxName","sourceAsset","handleRestart","pressed","onRestart","onActiveAmountChange","MintTransactionStatus","stop","wrongAddressDialogOpened","setWrongAddressDialogOpened","handleCloseWrongAddressDialog","activeDeposit","depositMachines","machine","currentAmount","sourceTxAmount","queryTx","parseTxQueryString","accountExplorerLink","getAddressExplorerLink","isTxExpired","keys","MintTransactionDepositStatus","handleSubmitToDestinationChain","send","handleReload","destTxHash","MintConfiguration","TxConfigurationStep","INITIAL","step","setStep","onInitialNext","FEES","onFeesPrev","MintFlow","match","exact","releaseTooltips","ReleaseFeesStep","releasingInitialized","setReleasingInitialized","$release","$releaseUsdAmount","rates","BURN","destinationCurrency","destinationAmountUsd","destinationCurrencyConfig","createReleaseTransaction","canInitializeReleasing","preValidateReleaseTransaction","onReleaseTxCreated","RELEASE_TRANSACTION","AddressInput","TextField","InputProps","notched","AddressInputWrapper","ReleaseInitialStep","currencySymbols","bridgeChain","Chain","mintChainClassMap","rentxName","resetBalances","fetchAssetBalance","getBalance","toNumber","currencySymbol","sourceCurrencySymbol","addOrUpdateBalance","useFetchBalances","supportedReleaseCurrencies","usdAmount","setReleaseCurrency","setReleaseAmount","handleAddressChange","setReleaseAddress","handleSetMaxBalance","targetCurrency","releaseCurrencyConfig","releaseChainConfig","isAddressValid","ChainClass","releaseChainClassMap","chainInstance","addressIsValid","validateAddress","hasBalance","Fade","supportedBurnChains","ReleaseProgressStatus","generalError","getBurnAndReleaseParams","burnChainConfig","burnTxHash","burnTxLink","handleSubmit","buttonSubmitting","ReleaseCompletedStatus","releaseTxLink","releaseAddressLink","resetRelease","useBurnMachine","burnTransaction","burnMachine","burnChainMap","releaseChainMap","autoSubmit","useReleaseTransactionPersistence","ReleaseProcessStep","burnCurrencyConfig","ReleaseTransactionStatus","setSubmitting","timeoutError","setTimeoutError","ReleaseConfiguration","ReleaseFlow","supportedParamNetworks","RenNetwork","Mainnet","Testnet","TestnetVDot3","MainnetVDot3","useSimplePaginationActionsStyles","flexShrink","spacing","black","SimplePaginationActions","page","rowsPerPage","onChangePage","max","useSimplestPaginationActionsStyles","SimplestPaginationActions","useSimplePaginationStyles","toolbar","spacer","caption","SimplePagination","TablePagination","rowsPerPageOptions","ActionsComponent","simplestDisplayedRows","useSimplestPaginationStyles","SimplestPagination","labelRowsPerPage","labelDisplayedRows","useShowEntryStyles","hide","ShowEntry","when","standardPaddings","useTransactionsHeaderStyles","greyHeaderBackground","actions","TransactionsContent","TransactionsHeader","useTransactionsStatusHeaderStyles","fontWeight","typography","fontWeightBold","TransactionsStatusHeader","TransactionsPaginationWrapper","useTransactionEntryStyles","details","alignSelf","datetime","multiple","multipleLabel","multiplePagination","description","expired","tooltipIcon","MintTransactionEntryResolver","isActive","handleContinue","setTxHistoryOpened","isMintTransactionCompleted","onContinue","MintTransactionEntryMachine","handleFinish","WarningChip","Chip","alertWarning","alertWarningBackground","MintTransactionEntry","meta","phase","createdTimestamp","transactionsCount","StatusIcon","EmptyIcon","TxEntryStatus","COMPLETED","CompletedIcon","TxPhase","LOCK","handlePageChange","newPage","completed","isTransactionCompleted","EXPIRED","Tooltip","ACTION_REQUIRED","PENDING","needsAction","showConfirmations","ReleaseTransactionEntryResolver","isReleaseTransactionCompleted","ReleaseTransactionEntryMachine","ReleaseTransactionEntry","useTransactionHistoryDialogStyles","TransactionHistoryDialog","TransactionHistory","allTransactions","$orderedTransactions","txsPending","$transactionsData","opened","$txHistoryOpened","activeTxId","setTxsPending","txsData","setTransactions","x","bridgeChainToRenChain","str","all","setPage","handleChangePage","itemsCount","showTransactions","pendingTxsCount","completedTxsCount","onBackdropClick","keepMounted","mr","charAt","index","startIndex","indexIsInCurrentPage","isFirstShown","isPreviousDifferent","showHeader","Header","1","4","42","walletPickerModalConfig","chains","EthereumInjectedConnector","networkIdMapper","BinanceSmartChainInjectedConnector","MainLayout","useMobileLayoutStyles","parsed","queryString","useSetNetworkFromParam","useSyncMultiwalletNetwork","useWeb3Signatures","txHistoryOpened","txsNeedsAction","$transactionsNeedsAction","$authRequired","authWarningOpened","setAuthWarningOpened","mobileMenuOpen","setMobileMenuOpen","handleMobileMenuClose","handleMobileMenuOpen","useWindowSize","breakpoints","handleTxHistoryToggle","walletPickerOpen","$walletPickerOpened","pickerClasses","React","walletMenuAnchor","setWalletMenuAnchor","handleWalletPickerClose","handleWalletMenuClose","handleWalletButtonClick","currentTarget","handleDisconnectWallet","walletPickerOptions","ConnectingInfo","WrongNetworkInfo","config","debugWallet","debugMultiwallet","debugNetworkName","showTxIndicator","ToolbarMenu","desktopMenu","desktopTxHistory","options","mobileMenu","aria-controls","aria-haspopup","DrawerMenu","Drawer","anchor","PaperProps","drawerPaper","drawerHeader","drawerLogo","drawerClose","ListItem","drawerListItem","mobileMenuButton","mobileTxHistory","drawerFooterListItem","Footer","WalletMenu","Menu","anchorEl","transformOrigin","MobileLayout","ConnectedMainLayout","MainPage","TERMS_AGREED","WELCOME","fetchData","fetchMarketDataRates","setExchangeRates","dataRefreshInterval","useExchangeRates","fetchEthMarketDataGasPrices","anyBlockPrices","prices","standard","BSCC","setGasPrices","useGasPrices","paperShaking","$ui"],"mappings":"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","file":"static/js/5.091724ac.chunk.js","sourcesContent":["import {\n  makeStyles,\n  Paper,\n  PaperProps,\n  styled,\n  Theme,\n} from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { useShakingStyles } from \"../../theme/animationUtils\";\n\nconst useBridgePaperStyles = makeStyles((theme) => {\n  return {\n    root: {\n      maxWidth: 400,\n      margin: \"0 auto\",\n      position: \"relative\",\n      overflow: \"hidden\",\n    },\n  };\n});\n\ntype BridgePurePaperProps = PaperProps & {\n  shaking?: boolean;\n};\n\nexport const BridgePurePaper: FunctionComponent<BridgePurePaperProps> = ({\n  shaking,\n  className,\n  ...props\n}) => {\n  const classes = useBridgePaperStyles();\n  const shakingStyles = useShakingStyles();\n  const resolvedClassName = classNames(className, {\n    [shakingStyles.shaking]: shaking,\n  });\n  return <Paper className={resolvedClassName} classes={classes} {...props} />;\n};\n\ntype BridgePaperProps = PaperContentProps & BridgePurePaperProps;\n\n// deprecated - used only in catalog - remove gradually\nexport const BridgePaper: FunctionComponent<BridgePaperProps> = ({\n  topPadding,\n  bottomPadding = true,\n  children,\n  ...rest\n}) => {\n  return (\n    <BridgePurePaper {...rest}>\n      <PaperContent topPadding={topPadding} bottomPadding={bottomPadding}>\n        {children}\n      </PaperContent>\n    </BridgePurePaper>\n  );\n};\n\nexport const BridgePaperWrapper = styled(\"div\")({\n  marginTop: 40,\n});\n\nconst SMALL_PADDING = 10;\nconst MEDIUM_PADDING = 20;\nconst BIG_PADDING = 40;\n\nconst getPadding = (variant: PaddingVariant = \"big\") => {\n  switch (variant) {\n    case \"small\":\n      return SMALL_PADDING;\n    case \"medium\":\n      return MEDIUM_PADDING;\n    case \"big\":\n    default:\n      return BIG_PADDING;\n  }\n};\n\nconst usePaperContentStyles = makeStyles<Theme, PaperContentProps>((theme) => ({\n  root: {\n    paddingLeft: ({ paddingVariant }) => getPadding(paddingVariant),\n    paddingRight: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  top: {\n    paddingTop: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  bottom: {\n    paddingBottom: ({ paddingVariant }) => getPadding(paddingVariant),\n  },\n  darker: {\n    backgroundColor: theme.customColors.whiteDarker,\n  },\n}));\n\ntype PaddingVariant = \"big\" | \"medium\" | \"small\";\n\nexport type PaperContentProps = {\n  darker?: boolean;\n  topPadding?: boolean;\n  bottomPadding?: boolean;\n  paddingVariant?: PaddingVariant;\n  className?: string;\n};\n\nexport const PaperContent: FunctionComponent<PaperContentProps> = ({\n  topPadding,\n  bottomPadding,\n  darker,\n  paddingVariant,\n  className,\n  children,\n}) => {\n  const styles = usePaperContentStyles({ paddingVariant: paddingVariant });\n  const resolvedClassName = classNames(styles.root, className, {\n    [styles.top]: topPadding,\n    [styles.bottom]: bottomPadding,\n    [styles.darker]: darker,\n  });\n  return <div className={resolvedClassName}>{children}</div>;\n};\n\nexport const PaperHeader = styled(\"header\")({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  paddingTop: SMALL_PADDING,\n  paddingBottom: SMALL_PADDING,\n  paddingLeft: SMALL_PADDING,\n  paddingRight: SMALL_PADDING,\n});\n\nexport const PaperNav = styled(\"div\")({\n  justifySelf: \"flex-start\",\n  minWidth: 72,\n});\n\nexport const PaperActions = styled(\"div\")({\n  justifySelf: \"flex-end\",\n  minWidth: 72,\n  \"& > *\": {\n    margin: \"0 4px\",\n    \"&:first-child\": {\n      marginLeft: 0,\n    },\n    \"&:last-child\": {\n      marginRight: 0,\n    },\n  },\n});\n\nexport const PaperTitle = styled(\"div\")({\n  justifySelf: \"center\",\n  textAlign: \"center\",\n  width: \"100%\",\n});\n\nconst useSpacedContentStyles = makeStyles({\n  root: {\n    minHeight: 200,\n  },\n  rootSmaller: {\n    minHeight: 130,\n  },\n});\n\ntype SpacedPaperContentProps = PaperContentProps & {\n  smaller?: boolean;\n};\n\nexport const SpacedPaperContent: FunctionComponent<SpacedPaperContentProps> = ({\n  smaller,\n  ...rest\n}) => {\n  const styles = useSpacedContentStyles();\n  const className = classNames(styles.root, {\n    [styles.rootSmaller]: smaller,\n  });\n  return <PaperContent className={className} {...rest} />;\n};\n","import { Tab, Tabs, TabsProps } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\nimport { paths } from \"../../../pages/routes\";\n\nexport const TransactionTypeTabs: FunctionComponent<TabsProps> = () => {\n  const history = useHistory();\n  const { path } = useRouteMatch();\n  const onTabChange = useCallback(\n    (event: React.ChangeEvent<{}>, newPath: string) => {\n      history.push(newPath);\n    },\n    [history]\n  );\n\n  return (\n    <>\n      <Tabs\n        value={path}\n        onChange={onTabChange}\n        indicatorColor=\"primary\"\n        variant=\"fullWidth\"\n      >\n        <Tab\n          label={path === paths.MINT ? \"Minting\" : \"Mint\"}\n          value={paths.MINT}\n        />\n        <Tab\n          label={path === paths.RELEASE ? \"Releasing\" : \"Release\"}\n          value={paths.RELEASE}\n        />\n      </Tabs>\n    </>\n  );\n};\n","import firebase from \"firebase/app\";\n\nrequire(\"firebase/auth\");\nrequire(\"firebase/firestore\");\nrequire(\"firebase/functions\");\n\n// Creates a user profile\nconst createOrUpdateProfileData = async (\n  db: firebase.firestore.Firestore,\n  uid: string\n) => {\n  // update user collection\n  const doc = db.collection(\"users\").doc(uid);\n  const docData = await doc.get();\n  try {\n    if (docData.exists) {\n      // add a new signature if needed\n      await doc.update({\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n      });\n    } else {\n      // create user\n      await doc.set({\n        uid,\n        updated: firebase.firestore.Timestamp.fromDate(new Date(Date.now())),\n        signatures: [],\n      });\n    }\n  } catch (e) {\n    console.error(\"failed to update user profile\", e);\n    throw e;\n  }\n};\n\n// Check if an account exists for the given id and signature,\n// otherwise attempt to register\nconst signInOrRegister = async (\n  id: string,\n  signature: string\n): Promise<firebase.User | null> => {\n  let token: string | null = null;\n  try {\n    const res = await firebase.functions().httpsCallable(\"authenticate\")({\n      signed: signature,\n      account: id,\n    });\n\n    token = res.data.token;\n    if (!token) {\n      throw new Error(\"missing token\");\n    }\n  } catch (e) {\n    console.error(\"Failed to create token\", e);\n    throw e;\n  }\n\n  let user;\n  try {\n    user = token && (await firebase.auth().signInWithCustomToken(token)).user;\n  } catch (e) {\n    // FIXME: we should probably handle wrong signatures here, as it would imply\n    // some sort of corruption or attack.\n    console.error(\"Failed to authenticate with token\", e);\n    throw e;\n  }\n  if (!user) return null;\n  // always create / update profile data\n  await createOrUpdateProfileData(firebase.firestore(), user.uid);\n  return user;\n};\n\n// Check if the user is currently authenticated for the correct address,\n// otherwise attempt to sign in or register for that address\n// TODO: remove \"signature\" and only rely on \"rawSignature\" because\n// only rawSignature can be verified\nexport const getFirebaseUser = async (\n  address: string,\n  signatures: { rawSignature: string; signature: string }\n) => {\n  const { currentUser } = firebase.auth();\n  if (!currentUser || currentUser.uid !== address) {\n    // If the user is logged in with another wallet, sign out first\n    if (currentUser?.uid !== address) {\n      await firebase.auth().signOut();\n    }\n    return signInOrRegister(address, signatures.rawSignature);\n  } else {\n    return currentUser;\n  }\n};\n","import { GatewaySession } from \"@renproject/ren-tx\";\nimport firebase from \"firebase/app\";\nimport { env } from \"../../../constants/environmentVariables\";\n\nimport { Database } from \"../database\";\nimport { getFirebaseUser } from \"./firebaseUtils\";\n\nif (!env.FIREBASE_KEY) {\n  console.warn(`No database key set.`);\n}\n\nfirebase.initializeApp({\n  apiKey: env.FIREBASE_KEY,\n  authDomain: window.location.hostname,\n  projectId: env.FIREBASE_PROJECT_ID,\n});\n\nrequire(\"firebase/firestore\");\n\ntype DbTimestamps = {\n  seconds: number;\n  nanoseconds: number;\n};\n\nexport type DbMeta = {\n  state: string;\n};\n\nexport type DbGatewaySession = GatewaySession & {\n  updated: DbTimestamps;\n  created: DbTimestamps;\n  meta: DbMeta;\n};\n\nexport class FireBase<Transaction extends { id: string }>\n  implements Database<Transaction> {\n  private db: firebase.firestore.Firestore;\n\n  constructor() {\n    this.db = firebase.firestore();\n  }\n\n  public addTx = async (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => {\n    // add timestamps\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    ) as DbTimestamps;\n\n    const dbTx = {\n      ...tx,\n      created: timestamps,\n      updated: timestamps,\n    };\n\n    await this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .set({\n        user: localWeb3Address.toLowerCase(),\n        walletSignature: fsSignature,\n        id: tx.id,\n        updated: timestamps,\n        createdSeconds: timestamps.seconds,\n        data: JSON.stringify(dbTx),\n      })\n      .catch((e) => console.error(\"failed to track tx\", e));\n  };\n\n  public updateTx = async (tx: Transaction) => {\n    const timestamps = firebase.firestore.Timestamp.fromDate(\n      new Date(Date.now())\n    );\n    const dbTx = { ...tx, updated: timestamps };\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({\n          data: JSON.stringify(dbTx),\n          updated: timestamps,\n        });\n    } catch (e) {\n      console.error(\"failed to update\", e);\n      throw e;\n    }\n  };\n\n  public deleteTx = async (tx: Transaction) => {\n    try {\n      await this.db\n        .collection(\"transactions\")\n        .doc(tx.id)\n        .update({ deleted: true });\n    } catch (e) {\n      console.error(\"failed to delete\", e);\n      throw e;\n    }\n  };\n\n  public getTx = async (tx: Transaction) => {\n    return this.db\n      .collection(\"transactions\")\n      .doc(tx.id)\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          const data = doc.data();\n          if (data && !data.deleted) {\n            return JSON.parse(data.data);\n          }\n        }\n        throw new Error(`Tx: ${tx.id} not found`);\n      })\n      .catch((e) => {\n        console.error(\"Failed to get tx\", e);\n        throw e;\n      });\n  };\n\n  public getTxs = async (uid: string): Promise<Transaction[]> => {\n    try {\n      const fsDataSnapshot = await this.db\n        .collection(\"transactions\")\n        .where(\"user\", \"==\", uid.toLowerCase())\n        .get();\n      const fsTransactions: Transaction[] = [];\n      if (!fsDataSnapshot.empty) {\n        fsDataSnapshot.forEach((doc: any) => {\n          const data = doc.data();\n          if (data.deleted) return;\n          const tx: Transaction = JSON.parse(data.data);\n          fsTransactions.push(tx);\n        });\n      }\n      return fsTransactions;\n    } catch (e) {\n      console.error(\"failed to fetch txs\", e);\n      throw e;\n    }\n  };\n\n  public getUser = async (\n    address: string,\n    signatures: { signature: string; rawSignature: string }\n  ) => {\n    const user = await getFirebaseUser(address, signatures);\n    return (\n      user && {\n        uid: user.uid,\n      }\n    );\n  };\n}\n","export type TransactionStatusType = \"completed\" | \"pending\" | \"submitted\";\n\n// multiwallet compatible\nexport enum WalletStatus {\n  DISCONNECTED = \"disconnected\",\n  CONNECTING = \"connecting\",\n  CONNECTED = \"connected\",\n  WRONG_NETWORK = \"wrong_network\",\n}\n\nexport type WalletConnectionStatusType =\n  | \"disconnected\"\n  | \"connecting\"\n  | \"connected\"\n  | \"wrong_network\";\n","import { FireBase } from \"./firebase/firebase\";\n\nexport interface Database<Transaction extends { id: string }> {\n  addTx: (\n    tx: Transaction,\n    localWeb3Address: string,\n    fsSignature: string | null\n  ) => Promise<void>;\n\n  updateTx: (tx: Transaction) => Promise<void>;\n\n  deleteTx: (tx: Transaction) => Promise<void>;\n\n  getTxs: (signature: string) => Promise<Transaction[]>;\n\n  getUser: (\n    address: string,\n    signatures: { rawSignature: string; signature: string }\n  ) => Promise<{ uid: string } | null>;\n}\n\nexport const newDefaultDatabase = <Transaction extends { id: string }>() =>\n  new FireBase<Transaction>();\n\nexport const db = newDefaultDatabase();\n","export const trimAddress = (address?: string, chars = 4) => {\n  if (!address) {\n    return \"\";\n  }\n  if (address.length <= 2 * chars) {\n    return address;\n  }\n  const start = address.slice(0, chars);\n  const end = address.slice(-chars);\n  return `${start}...${end}`;\n};\n\nconst vowels = \"eaiou\".split(\"\");\nexport const isFirstVowel = (str: string) =>\n  Boolean(str) && str.length > 0 && vowels.includes(str.charAt(0).toLowerCase());\n","const connectBinanceChain = () => {\n  if (getBinanceChain() !== \"undefined\") {\n    getBinanceChain().enable().catch(console.error);\n  }\n};\n\nconst getBinanceChain = () => {\n  return (window as any).BinanceChain;\n};\n\nexport const signWithBinanceChain: (msg: string) => Promise<string> = (\n  msg: string\n) =>\n  new Promise((resolve, reject) => {\n    if (!getBinanceChain()) {\n      reject(\"no binance chain\");\n    }\n    getBinanceChain()\n      .request({ method: \"eth_requestAccounts\" })\n      .then((addresses: Array<string>) => {\n        const from = addresses[0];\n        if (!from) return connectBinanceChain();\n        getBinanceChain()\n          .request({\n            method: \"eth_sign\",\n            params: [from, msg],\n          })\n          .then(resolve)\n          .catch(reject);\n      });\n  });\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport { useCallback, useEffect, useMemo } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Web3 from \"web3\";\nimport {\n  WalletConnectionStatusType,\n  WalletStatus,\n} from \"../../components/utils/types\";\nimport { storageKeys } from \"../../constants/constants\";\nimport { db } from \"../../services/database/database\";\nimport { signWithBinanceChain } from \"../../services/wallets/bsc\";\nimport { BridgeWallet, RenChain } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport {\n  $isAuthenticating,\n  $multiwalletChain,\n  $walletUser,\n  setAuthRequired,\n  setSignatures,\n  settingUser,\n  setUser,\n} from \"./walletSlice\";\n\ntype WalletData = ReturnType<typeof useMultiwallet> & {\n  account: string;\n  status: WalletConnectionStatusType;\n  walletConnected: boolean;\n  provider: any;\n  symbol: BridgeWallet;\n  deactivateConnector: () => void;\n};\n\nconst resolveWallet = (provider: any) => {\n  if (provider?.isMetaMask) {\n    return BridgeWallet.METAMASKW;\n  } else if (\n    provider?.chainId === \"0x61\" ||\n    provider?.chainId.indexOf(\"Binance\")\n  ) {\n    return BridgeWallet.BINANCESMARTW;\n  }\n  return BridgeWallet.UNKNOWNW;\n};\n\ntype UseWallet = (chain: string) => WalletData;\n\nexport const useWallet: UseWallet = (chain) => {\n  const {\n    enabledChains,\n    targetNetwork,\n    activateConnector,\n    setTargetNetwork,\n  } = useMultiwallet();\n  const { account = \"\", status = \"disconnected\" } =\n    enabledChains?.[chain] || {};\n  const provider = enabledChains?.[chain]?.provider;\n  const symbol = resolveWallet(provider);\n  const emptyFn = () => {};\n  const deactivateConnector =\n    enabledChains[chain]?.connector.deactivate || emptyFn;\n\n  return {\n    account,\n    status,\n    walletConnected: status === WalletStatus.CONNECTED,\n    provider,\n    symbol,\n    targetNetwork,\n    enabledChains,\n    activateConnector,\n    setTargetNetwork,\n    deactivateConnector,\n  } as WalletData;\n};\n\nexport const useSelectedChainWallet = () => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  return useWallet(multiwalletChain);\n};\n\nexport const useSyncMultiwalletNetwork = () => {\n  const { targetNetwork, setTargetNetwork } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    if (renNetwork !== targetNetwork) {\n      console.info(\"syncing multiwallet with network\", renNetwork);\n      setTargetNetwork(\n        renNetwork.includes(\"mainnet\") ? RenNetwork.Mainnet : renNetwork\n      );\n    }\n  }, [renNetwork, setTargetNetwork, targetNetwork]);\n};\n\nconst SIGN_MESSAGE = \"Allow RenBridge to back up transactions\";\n\nconst getWeb3Signatures = async (\n  address: string,\n  web3: Web3,\n  chain: RenChain\n) => {\n  const localSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.SIG_MAP) || \"{}\"\n  );\n  const localRawSigMap = JSON.parse(\n    localStorage.getItem(storageKeys.RAW_SIG_MAP) || \"{}\"\n  );\n  const addressLowerCase = address.toLowerCase();\n\n  let signature: string = localSigMap[addressLowerCase] || \"\";\n  let rawSignature: string = localRawSigMap[addressLowerCase] || \"\";\n\n  if (!signature || !rawSignature) {\n    // get unique wallet signature for database backup\n    if (\n      chain === RenChain.ethereum ||\n      // signing is actually based on wallet, not chain,\n      // so use this style if the provider is eth\n      // TODO: move signing functionality into multiwallet?\n      (web3.currentProvider as any).connection.isMetaMask\n    ) {\n      console.info(\"signing\");\n      rawSignature = await web3.eth.personal.sign(\n        web3.utils.utf8ToHex(SIGN_MESSAGE),\n        addressLowerCase,\n        \"\"\n      );\n    } else if (chain === RenChain.binanceSmartChain) {\n      rawSignature = await signWithBinanceChain(SIGN_MESSAGE);\n    }\n\n    localRawSigMap[addressLowerCase] = rawSignature;\n    localStorage.setItem(\n      storageKeys.RAW_SIG_MAP,\n      JSON.stringify(localRawSigMap)\n    );\n\n    signature = web3.utils.sha3(rawSignature);\n    localSigMap[addressLowerCase] = signature;\n    localStorage.setItem(storageKeys.SIG_MAP, JSON.stringify(localSigMap));\n  }\n  return { signature, rawSignature };\n};\n\n// TODO TBD: cache for more wallet providers?\nconst useWeb3 = () => {\n  const { provider } = useSelectedChainWallet();\n  return useMemo(() => new Web3(provider), [provider]);\n};\n\nexport const useSignatures = () => {\n  const dispatch = useDispatch();\n  const chain = useSelector($multiwalletChain);\n  const { account } = useWallet(chain);\n  const web3 = useWeb3();\n  const getSignatures = useCallback(async () => {\n    console.debug(\"reauth\");\n    if (account && web3) {\n      try {\n        const signatures = await getWeb3Signatures(account, web3, chain);\n        dispatch(setSignatures(signatures));\n        console.debug(\"account\", account);\n        dispatch(settingUser());\n        const userData = await db.getUser(account.toLowerCase(), signatures);\n        dispatch(setUser(userData));\n      } catch (error) {\n        // FIXME: dispatch some error here to handle in UI\n        console.error(error);\n      }\n    }\n  }, [dispatch, chain, account, web3]);\n\n  return { getSignatures };\n};\n\nexport const useWeb3Signatures = () => {\n  const { getSignatures } = useSignatures();\n  useEffect(() => {\n    getSignatures();\n  }, [getSignatures]);\n\n  return { getSignatures };\n};\n\nexport const useAuthentication = () => {\n  const { account } = useSelectedChainWallet();\n  const user = useSelector($walletUser);\n  const isAuthenticating = useSelector($isAuthenticating);\n  const { getSignatures } = useSignatures();\n  const isAuthenticated = user !== null && account.toLowerCase() === user.uid;\n\n  return { isAuthenticated, isAuthenticating, authenticate: getSignatures };\n};\n\nexport const useAuthRequired = (authRequired: boolean) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(setAuthRequired(authRequired));\n    return () => {\n      dispatch(setAuthRequired(false));\n    };\n  }, [dispatch, authRequired]);\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { useNotifications } from \"../../providers/Notifications\";\nimport { db } from \"../../services/database/database\";\nimport {\n  BridgeCurrency,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  isTestnetNetwork,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from '../../utils/strings'\nimport { $renNetwork, setRenNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport {\n  $currentTxId,\n  removeTransaction,\n  setCurrentTxId,\n} from \"./transactionsSlice\";\nimport { TxType } from \"./transactionsUtils\";\n\nexport const useTransactionDeletion = (tx: GatewaySession) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { showNotification } = useNotifications();\n  const { walletConnected } = useSelectedChainWallet();\n\n  const [menuOpened, setMenuOpened] = useState(false);\n  const handleMenuClose = useCallback(() => {\n    setMenuOpened(false);\n  }, []);\n  const handleMenuOpen = useCallback(() => {\n    if (walletConnected) {\n      setMenuOpened(true);\n    }\n  }, [walletConnected]);\n  const handleDeleteTx = useCallback(() => {\n    db.deleteTx(tx).then(() => {\n      dispatch(removeTransaction(tx));\n      showNotification(`Transaction ${trimAddress(tx.id, 6)} deleted.`);\n      history.push(tx.type === TxType.MINT ? paths.MINT : paths.RELEASE);\n    });\n  }, [dispatch, history, showNotification, tx]);\n\n  return { menuOpened, handleMenuOpen, handleMenuClose, handleDeleteTx };\n};\n\nexport const useRenNetworkTracker = (currency: BridgeCurrency) => {\n  const dispatch = useDispatch();\n  const renChain = useSelector($multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  useEffect(() => {\n    const currencyConfig = getCurrencyConfig(currency);\n    const networkMapping = currencyConfig.networkMappings[renChain];\n    let newNetwork: RenNetwork | null = null;\n    if (isTestnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.testnet;\n    } else if (isMainnetNetwork(renNetwork)) {\n      newNetwork = networkMapping.mainnet;\n    } else {\n      console.error(`Unknown network ${newNetwork}`);\n    }\n    if (newNetwork && renNetwork !== newNetwork) {\n      dispatch(setRenNetwork(newNetwork));\n    }\n  }, [dispatch, renChain, currency, renNetwork]);\n};\n\nexport const useSetCurrentTxId = (id: string) => {\n  const dispatch = useDispatch();\n  const currentId = useSelector($currentTxId);\n  useEffect(() => {\n    if (id !== currentId) {\n      dispatch(setCurrentTxId(id));\n    }\n  }, [dispatch, id, currentId]);\n};\n","import Numeral from \"numeral\";\n\nexport const toUsdFormat = (value: string | number) => {\n  return Numeral(value).format(\"$0,0.00\");\n};\n\nexport const numberFormatOptions = {\n  thousandSeparator: true,\n  allowLeadingZeros: false,\n  allowNegative: false,\n  allowedDecimalSeparators: [\".\", \",\"],\n};\n","import React, { FunctionComponent } from \"react\";\nimport NumberFormat, { NumberFormatProps } from \"react-number-format\";\nimport { numberFormatOptions } from \"../../utils/formatters\";\n\ntype NumberFormatTextProps = NumberFormatProps & {\n  spacedSuffix?: string;\n};\nexport const NumberFormatText: FunctionComponent<NumberFormatTextProps> = ({\n  spacedSuffix,\n  suffix,\n  ...props\n}) => {\n  const resolvedSuffix = spacedSuffix ? ` ${spacedSuffix}` : suffix;\n  return (\n    <NumberFormat\n      {...numberFormatOptions}\n      displayType=\"text\"\n      suffix={resolvedSuffix}\n      {...props}\n    />\n  );\n};\n","import { styled } from \"@material-ui/core\";\n\nexport const CheckboxWrapper = styled(\"div\")({\n  marginTop: 10,\n  textAlign: 'center'\n});\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core\";\nimport classNames from \"classnames\";\n\nconst useStyles = makeStyles({\n  root: {\n    background: \"lightgray\",\n  },\n  wrapper: {\n    background: \"gray\",\n    overflow: \"hidden\",\n    height: 5,\n    \"&:hover\": {\n      height: 10,\n    },\n  },\n  wrapperEnabled: {\n    height: \"auto\",\n    \"&:hover\": {\n      height: \"auto\",\n    },\n  },\n});\n\nconst off = process.env.NODE_ENV === \"production\";\n\ntype DebugProps = {\n  it: any;\n  force?: boolean;\n  disable?: boolean;\n  wrapper?: boolean;\n};\n\nfunction replacer(name: any, val: any) {\n  if (val && val.type === \"Buffer\") {\n    return \"buffer\";\n  }\n  return val;\n}\n\ntype DebugWrapperProps = {\n  enabled: boolean;\n};\n\nconst DebugWrapper: FunctionComponent<DebugWrapperProps> = ({\n  enabled,\n  children,\n}) => {\n  const classes = useStyles();\n  const [show, setShow] = useState(false);\n  const toggleShow = useCallback(() => {\n    setShow(!show);\n  }, [show]);\n  if (!enabled) {\n    return <>{children}</>;\n  }\n  const className = classNames(classes.wrapper, {\n    [classes.wrapperEnabled]: show,\n  });\n  return (\n    <div className={className} onClick={toggleShow}>\n      {children}\n    </div>\n  );\n};\n\nexport const Debug: FunctionComponent<DebugProps> = ({\n  it,\n  force,\n  disable,\n  wrapper,\n  children,\n}) => {\n  const classes = useStyles();\n  const target = it || children;\n  const show = !off || force;\n  const noClick = useCallback((event) => {\n    event.stopPropagation();\n  }, []);\n  return show && !disable ? (\n    <DebugWrapper enabled={!!wrapper}>\n      <pre className={classes.root} onClick={noClick}>\n        {JSON.stringify(target, replacer, 2)}\n      </pre>\n    </DebugWrapper>\n  ) : null;\n};\n\nexport const DebugComponentProps: FunctionComponent<any> = (props) => (\n  <Debug it={props} />\n);\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport { mintChainClassMap } from \"../../services/rentx\";\nimport {\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  RenChain,\n  toReleasedCurrency,\n} from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { useSelectedChainWallet } from \"./walletHooks\";\nimport {\n  $chain,\n  addOrUpdateBalance,\n  AssetBalance,\n  resetBalances,\n} from \"./walletSlice\";\n\nexport const isSupportedByCurrentNetwork = (\n  currency: BridgeCurrency,\n  renNetwork: RenNetwork,\n  chain: RenChain\n) => {\n  const currencyConfig = getCurrencyConfig(currency);\n  if (currencyConfig.networkMappings) {\n    const chainMapping = currencyConfig.networkMappings[chain];\n    return (\n      chainMapping.testnet === renNetwork || chainMapping.mainnet === renNetwork\n    );\n  }\n  return true;\n};\n\nexport const useFetchBalances = (currencySymbols: Array<BridgeCurrency>) => {\n  const dispatch = useDispatch();\n  const bridgeChain = useSelector($chain);\n  const { walletConnected, provider, account } = useSelectedChainWallet();\n  const renNetwork = useSelector($renNetwork);\n  const bridgeChainConfig = getChainConfig(bridgeChain);\n  const Chain = (mintChainClassMap as any)[bridgeChainConfig.rentxName];\n\n  useEffect(() => {\n    if (!walletConnected) {\n      dispatch(resetBalances());\n    }\n  }, [dispatch, walletConnected]);\n\n  const fetchAssetBalance = useCallback(\n    (currency: BridgeCurrency) => {\n      if (\n        provider &&\n        account &&\n        walletConnected &&\n        isSupportedByCurrentNetwork(\n          currency,\n          renNetwork,\n          bridgeChainConfig.rentxName\n        )\n      ) {\n        const chain = Chain(provider, renNetwork);\n        return chain\n          .getBalance(currency, account)\n          .then((balance: any) => {\n            return balance.toNumber() / 100000000;\n          })\n          .catch(console.error);\n      } else {\n        return Promise.resolve(null);\n      }\n    },\n    [\n      Chain,\n      account,\n      renNetwork,\n      provider,\n      walletConnected,\n      bridgeChainConfig.rentxName,\n    ]\n  );\n\n  useDebounce(\n    () => {\n      if (!walletConnected) {\n        return;\n      }\n      for (const currencySymbol of currencySymbols) {\n        const sourceCurrencySymbol = toReleasedCurrency(currencySymbol);\n        fetchAssetBalance(sourceCurrencySymbol).then((balance: any) => {\n          if (balance === null) {\n            return;\n          }\n          dispatch(\n            addOrUpdateBalance({\n              symbol: currencySymbol,\n              balance,\n            })\n          );\n        });\n      }\n    },\n    1000,\n    [dispatch, fetchAssetBalance, walletConnected]\n  );\n};\n\nexport const getAssetBalance = (\n  balances: Array<AssetBalance>,\n  symbol: BridgeCurrency\n) => {\n  const balanceEntry = balances.find((entry) => entry.symbol === symbol);\n  return balanceEntry?.balance;\n};\n","import { useState } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDebounce } from \"react-use\";\nimport {\n  getBurnAndReleaseFees,\n  getLockAndMintFees,\n} from \"../../services/rentx\";\nimport { BridgeCurrency } from \"../../utils/assetConfigs\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { TxType } from \"../transactions/transactionsUtils\";\nimport { useWallet } from \"../wallet/walletHooks\";\nimport { $multiwalletChain } from \"../wallet/walletSlice\";\nimport { isSupportedByCurrentNetwork } from \"../wallet/walletUtils\";\nimport { SimpleFee } from \"./feesUtils\";\n\nconst feesCache: Record<string, SimpleFee> = {};\nexport const useFetchFees = (currency: BridgeCurrency, txType: TxType) => {\n  const multiwalletChain = useSelector($multiwalletChain);\n  const { provider, walletConnected } = useWallet(multiwalletChain);\n  const renNetwork = useSelector($renNetwork);\n  const initialFees: SimpleFee = {\n    mint: 0,\n    burn: 0,\n    lock: 0,\n    release: 0,\n  };\n  const [fees, setFees] = useState(initialFees);\n  const [pending, setPending] = useState(true);\n\n  useDebounce(\n    () => {\n      const cacheKey = `${currency}-${txType}-${renNetwork}`;\n      if (\n        provider &&\n        walletConnected &&\n        isSupportedByCurrentNetwork(currency, renNetwork, multiwalletChain)\n      ) {\n        if (feesCache[cacheKey]) {\n          setFees(feesCache[cacheKey]);\n          setPending(false);\n        } else {\n          setPending(true);\n          const fetchFees =\n            txType === TxType.MINT ? getLockAndMintFees : getBurnAndReleaseFees;\n          fetchFees(currency, provider, renNetwork, multiwalletChain)\n            .then((feeRates) => {\n              feesCache[cacheKey] = feeRates;\n              setFees(feesCache[cacheKey]);\n              setPending(false);\n            })\n            .catch(console.error);\n        }\n      }\n    },\n    1000,\n    [currency, provider, walletConnected, renNetwork, txType, multiwalletChain]\n  );\n\n  return { fees, pending };\n};\n","import { Backdrop } from \"@material-ui/core\";\nimport Dialog, { DialogProps } from \"@material-ui/core/Dialog\";\nimport MuiDialogTitle, {\n  DialogTitleProps,\n} from \"@material-ui/core/DialogTitle\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { BridgePurePaper } from \"../layout/Paper\";\n\nexport const useBridgeModalTitleStyles = makeStyles((theme) => ({\n  dialogTitle: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  titleWrapper: {\n    flexGrow: 1,\n    paddingLeft: 30, // compensating close icon for visual text centering\n    textAlign: \"center\",\n  },\n  title: {},\n  customContentWrapper: {\n    flexGrow: 1,\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  closeButtonWrapper: {\n    minWidth: 30,\n  },\n  closeButton: {\n    color: theme.palette.grey[600],\n  },\n}));\n\ntype BridgeModalTitleProps = DialogTitleProps & Pick<DialogProps, \"onClose\">;\n\nexport const BridgeModalTitle: FunctionComponent<BridgeModalTitleProps> = ({\n  title,\n  onClose,\n  className,\n  children,\n}) => {\n  const styles = useBridgeModalTitleStyles();\n  const onCustomClose = () => {\n    if (onClose) {\n      onClose({}, \"backdropClick\");\n    }\n  };\n  return (\n    <MuiDialogTitle\n      disableTypography\n      className={classNames(className, styles.dialogTitle)}\n    >\n      {title && (\n        <div className={styles.titleWrapper}>\n          <Typography variant=\"body1\" className={styles.title}>\n            {title}\n          </Typography>\n        </div>\n      )}\n      {children && (\n        <div className={styles.customContentWrapper}>{children}</div>\n      )}\n      <div className={styles.closeButtonWrapper}>\n        {onClose ? (\n          <IconButton\n            aria-label=\"close\"\n            className={styles.closeButton}\n            onClick={onCustomClose}\n          >\n            <CloseIcon fontSize=\"inherit\" />\n          </IconButton>\n        ) : null}\n      </div>\n    </MuiDialogTitle>\n  );\n};\n\nexport const BridgeModal: FunctionComponent<DialogProps> = ({\n  title,\n  open,\n  onClose,\n  children,\n  maxWidth,\n}) => {\n  return (\n    <Dialog onClose={onClose} open={open} maxWidth={maxWidth}>\n      <BridgeModalTitle onClose={onClose} title={title} />\n      {children}\n    </Dialog>\n  );\n};\n\nconst useNestedDrawerStyles = makeStyles((theme) => ({\n  backdrop: {\n    position: \"absolute\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    zIndex: \"auto\",\n  },\n  positioner: {\n    position: \"relative\",\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n  },\n  paper: {\n    position: \"absolute\",\n    bottom: 0,\n    width: \"100%\",\n  },\n}));\n\ntype NestedDrawerProps = DialogProps & {\n  open: boolean;\n};\n\nconst stopPropagation = (event: any) => {\n  event.stopPropagation();\n};\n\nexport const NestedDrawer: FunctionComponent<NestedDrawerProps> = ({\n  open,\n  onClose,\n  title,\n  className,\n  children,\n}) => {\n  const styles = useNestedDrawerStyles();\n  const resolvedClassName = classNames(className, styles.paper);\n\n  return (\n    <Backdrop className={styles.backdrop} open={open} onClick={onClose as any}>\n      <BridgePurePaper className={resolvedClassName} onClick={stopPropagation}>\n        {title && <BridgeModalTitle onClose={onClose} title={title} />}\n        {children}\n      </BridgePurePaper>\n    </Backdrop>\n  );\n};\n","const timeFormatLocale = \"en-US\";\n\nconst timeZone = \"UTC\";\n\nexport const dateOptions: Intl.DateTimeFormatOptions = {\n  timeZone,\n};\n\nexport const timeOptions: Intl.DateTimeFormatOptions = {\n  hour12: false,\n  timeZone,\n  timeZoneName: \"short\",\n};\n\nexport const getFormattedDateTime = (timestamp: number) => {\n  const dateObject = new Date(timestamp);\n  const date = dateObject.toLocaleDateString(navigator.language, dateOptions);\n  const time = dateObject.toLocaleTimeString(timeFormatLocale, timeOptions);\n  return { date, time };\n};\n\nexport const millisecondsToHMS = (milliseconds: number) => {\n  const seconds = Math.floor((milliseconds / 1000) % 60);\n  const minutes = Math.floor((milliseconds / 1000 / 60) % 60);\n  // take absolute hours as they may be greater than 24\n  const hours = Math.floor(milliseconds / (1000 * 60 * 60));\n  return { hours, minutes, seconds };\n};\n\nconst pad = (value: number) => {\n  return String(value).padStart(2, \"0\");\n};\n\nexport const getFormattedHMS = (milliseconds: number) => {\n  const { hours, minutes, seconds } = millisecondsToHMS(milliseconds);\n  return `${pad(hours)}:${pad(minutes)}:${pad(seconds)}`;\n};\n","import {\n  Button,\n  DialogProps,\n  styled,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useInterval } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from \"../../../components/buttons/Buttons\";\nimport {\n  SpecialAlertIcon,\n  WarningIcon,\n} from \"../../../components/icons/RenIcons\";\nimport {\n  PaperContent,\n  SpacedPaperContent,\n} from \"../../../components/layout/Paper\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BridgeModal,\n  NestedDrawer,\n} from \"../../../components/modals/BridgeModal\";\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { links } from \"../../../constants/constants\";\nimport { paths } from \"../../../pages/routes\";\nimport { usePaperTitle } from \"../../../providers/TitleProviders\";\nimport { getFormattedHMS } from \"../../../utils/dates\";\nimport { trimAddress } from \"../../../utils/strings\";\n\nexport const ProcessingTimeWrapper = styled(\"div\")({\n  marginTop: 5,\n  marginBottom: 5,\n});\n\ntype BookmarkPageWarningProps = {\n  onClosed?: () => void;\n};\n\nexport const BookmarkPageWarning: FunctionComponent<BookmarkPageWarningProps> = ({\n  onClosed,\n}) => {\n  const [open, setOpen] = useState(true);\n  const handleClose = useCallback(() => {\n    if (onClosed) {\n      onClosed();\n    }\n    setOpen(false);\n  }, [onClosed]);\n  return (\n    <NestedDrawer title=\"Warning\" open={open} onClose={handleClose}>\n      <SpacedPaperContent topPadding bottomPadding smaller>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Bookmark this page\n        </Typography>\n        <Typography variant=\"body2\" align=\"center\" gutterBottom>\n          To ensure you don’t lose track of your transaction, please bookmark\n          this page.\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={handleClose}>I understand</ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </NestedDrawer>\n  );\n};\n\ntype EnableNotificationsWarningProps = {\n  onClosed?: () => void;\n};\n\nexport const EnableNotificationsWarning: FunctionComponent<EnableNotificationsWarningProps> = ({\n  onClosed,\n}) => {\n  const [open, setOpen] = useState(true);\n  const handleClose = useCallback(() => {\n    if (onClosed) {\n      onClosed();\n    }\n    setOpen(false);\n  }, [onClosed]);\n  return (\n    <NestedDrawer title=\"Warning\" open={open} onClose={handleClose}>\n      <SpacedPaperContent topPadding bottomPadding>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Bookmark this page\n        </Typography>\n        <Typography variant=\"body2\" align=\"center\" gutterBottom>\n          To ensure you don’t lose track of your transaction, please bookmark\n          this page.\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <Button variant=\"text\" color=\"primary\">\n          Do not enable\n        </Button>\n        <ActionButtonWrapper>\n          <ActionButton onClick={handleClose}>\n            Enable Browser Notifications\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </NestedDrawer>\n  );\n};\n\ntype ProgressStatusProps = {\n  reason?: string;\n  processing?: boolean;\n};\n\nexport const ProgressStatus: FunctionComponent<ProgressStatusProps> = ({\n  reason = \"\",\n  processing = true,\n}) => {\n  const theme = useTheme();\n  const [, setTitle] = usePaperTitle();\n  useEffect(() => {\n    setTitle(reason);\n  }, [setTitle, reason]);\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          processing={processing}\n          color={theme.palette.primary.main}\n        >\n          <TransactionStatusInfo status={reason} />\n        </ProgressWithContent>\n      </ProgressWrapper>\n    </>\n  );\n};\n\nexport type TransactionItemProps = {\n  tx: GatewaySession;\n  isActive?: boolean;\n  onContinue?: ((depositHash?: string) => void) | (() => void);\n};\n\ntype HMSCountdownProps = { milliseconds: number };\n\nexport const HMSCountdown: FunctionComponent<HMSCountdownProps> = ({\n  milliseconds,\n}) => {\n  const [count, setCount] = useState(milliseconds);\n  useInterval(() => {\n    setCount((ms) => ms - 1000);\n  }, 1000);\n  const time = getFormattedHMS(count);\n\n  return <strong>{time}</strong>;\n};\n\nconst ErrorIconWrapper = styled(\"div\")(({ theme }) => ({\n  fontSize: 72,\n  lineHeight: 1,\n  marginTop: 8,\n  textAlign: \"center\",\n  color: theme.customColors.textLight,\n}));\n\ntype ErrorWithActionProps = DialogProps & {\n  title?: string;\n  onAction?: () => void;\n  reason?: string;\n  actionText?: string;\n};\n\nexport const ErrorDialog: FunctionComponent<ErrorWithActionProps> = ({\n  title = \"Error\",\n  open,\n  reason = \"\",\n  actionText = \"\",\n  onAction,\n  children,\n}) => {\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <WarningIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <ActionButton onClick={onAction}>{actionText}</ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\nexport const SubmitErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"Error submitting\"\n    actionText=\"Return to submission screen\"\n    {...props}\n  >\n    <span>Return to previous screen to resubmit</span>\n  </ErrorDialog>\n);\n\nexport const GeneralErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => (\n  <ErrorDialog\n    reason=\"An error has occurred\"\n    actionText=\"Refresh page\"\n    {...props}\n  >\n    <span>\n      Please ensure you have this page bookmarked before refreshing. If this\n      error persists, please{\" \"}\n      <Link external href={links.BUGS_LOG} color=\"primary\" underline=\"hover\">\n        submit a bug here\n      </Link>\n      .\n    </span>\n  </ErrorDialog>\n);\n\nexport const ExpiredErrorDialog: FunctionComponent<ErrorWithActionProps> = (\n  props\n) => {\n  const history = useHistory();\n  const goToHome = useCallback(() => {\n    history.push(paths.HOME);\n  }, [history]);\n\n  return (\n    <ErrorDialog\n      title=\"Expired\"\n      reason=\"This transaction has expired\"\n      actionText=\"Restart transaction\"\n      {...props}\n    >\n      <span>\n        Transaction expires after 24 hours. Restart the transaction and start\n        again.\n      </span>\n      <ActionButtonWrapper>\n        <Button variant=\"text\" color=\"inherit\" onClick={goToHome}>\n          Back to home\n        </Button>\n      </ActionButtonWrapper>\n    </ErrorDialog>\n  );\n};\n\ntype WarningWithActionsProps = DialogProps & {\n  title?: string;\n  reason?: string;\n  onMainAction?: () => void;\n  mainActionText?: string;\n  mainActionDisabled?: boolean;\n  onAlternativeAction?: () => void;\n  alternativeActionText?: string;\n  alternativeActionDisabled?: boolean;\n};\n\nexport const WarningDialog: FunctionComponent<WarningWithActionsProps> = ({\n  title = \"Warning\",\n  open,\n  reason = \"\",\n  mainActionText = \"\",\n  onMainAction,\n  mainActionDisabled,\n  alternativeActionText = \"\",\n  onAlternativeAction,\n  alternativeActionDisabled,\n  children,\n}) => {\n  const showMainAction = onMainAction && mainActionText;\n  return (\n    <BridgeModal open={open} title={title} maxWidth=\"xs\">\n      <SpacedPaperContent>\n        <ErrorIconWrapper>\n          <SpecialAlertIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ErrorIconWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          {reason}\n        </Typography>\n        <Typography\n          color=\"textSecondary\"\n          align=\"center\"\n          gutterBottom\n          component=\"div\"\n        >\n          {children}\n        </Typography>\n      </SpacedPaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <RedButton\n            variant=\"text\"\n            color=\"inherit\"\n            onClick={onAlternativeAction}\n            disabled={alternativeActionDisabled}\n          >\n            {alternativeActionText}\n          </RedButton>\n        </ActionButtonWrapper>\n        {showMainAction && (\n          <ActionButtonWrapper>\n            <ActionButton onClick={onMainAction} disabled={mainActionDisabled}>\n              {mainActionText}\n            </ActionButton>\n          </ActionButtonWrapper>\n        )}\n      </PaperContent>\n    </BridgeModal>\n  );\n};\n\ntype WrongAddressWarningDialog = WarningWithActionsProps & {\n  address: string;\n  addressExplorerLink: string;\n  currency: string;\n};\n\nexport const WrongAddressWarningDialog: FunctionComponent<WrongAddressWarningDialog> = ({\n  address,\n  addressExplorerLink,\n  currency,\n  ...props\n}) => {\n  return (\n    <WarningDialog\n      reason=\"Different account detected\"\n      alternativeActionText=\"Continue anyway\"\n      {...props}\n    >\n      <span>\n        This transaction was created with a different account to the current\n        account (\n        <Link\n          external\n          href={addressExplorerLink}\n          color=\"primary\"\n          underline=\"hover\"\n        >\n          {trimAddress(address, 5)}\n        </Link>\n        ). If you do not have access to the account that created the\n        transaction, you will not be able to access the {currency}. Please\n        switch account in your wallet.\n      </span>\n    </WarningDialog>\n  );\n};\n\nexport const AuthWarningDialog: FunctionComponent<WarningWithActionsProps> = ({\n  ...props\n}) => {\n  return (\n    <WarningDialog\n      reason=\"Allow RenBridge to backup transactions\"\n      mainActionText=\"Sign & allow to continue\"\n      {...props}\n    >\n      <span>\n        To continue, you must sign with your wallet to allow RenBridge to backup\n        your transactions. This allows you to resume a transaction if you close\n        your web browser mid-transaction.\n      </span>\n    </WarningDialog>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { styled } from \"@material-ui/core\";\nimport { BridgeChainConfig, CurrencyConfig } from \"../../../utils/assetConfigs\";\nimport { HMSCountdown } from \"../../transactions/components/TransactionsHelpers\";\n\nexport const mintTooltips = {\n  sending: \"The amount and asset you’re sending before fees are applied.\",\n  to: \"The blockchain you’re sending the asset to.\",\n  recipientAddress: \"The wallet that will receive the minted assets.\",\n};\n\nexport const getMintDynamicTooltips = (\n  chainConfig: BridgeChainConfig,\n  chainNativeCurrencyConfig: CurrencyConfig\n) => ({\n  acknowledge: `Minting an asset on ${chainConfig.full} requires you to submit a transaction. It will cost you a small amount of ${chainNativeCurrencyConfig.short}.`,\n});\n\nexport const DepositWrapper = styled(\"div\")({\n  position: \"relative\",\n});\n\ntype AddressValidityMessageProps = {\n  milliseconds: number;\n  destNetwork: string;\n};\n\nexport const AddressValidityMessage: FunctionComponent<AddressValidityMessageProps> = ({\n  milliseconds,\n  destNetwork,\n}) => {\n  return (\n    <span>\n      This Gateway Address expires in{\" \"}\n      <HMSCountdown milliseconds={milliseconds} />. Do not send multiple\n      deposits or deposit after it has expired. <br />\n      Once you have deposited funds to the Gateway Address, you have 24 hours to\n      submit the mint transaction to {destNetwork}\n    </span>\n  );\n};\n\nexport const MultipleDepositsMessage: FunctionComponent = () => {\n  return (\n    <span>\n      RenBridge has detected another deposit to the same gateway address. It\n      will require an additional submission to to the destination chain via your\n      web3 wallet.\n    </span>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { MINT_GAS_UNIT_COST } from \"../../../constants/constants\";\nimport {\n  BridgeChain,\n  BridgeCurrency,\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { fromGwei } from \"../../../utils/converters\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $exchangeRates, $gasPrices } from \"../../marketData/marketDataSlice\";\nimport {\n  findExchangeRate,\n  findGasPrice,\n  USD_SYMBOL,\n} from \"../../marketData/marketDataUtils\";\nimport { mintTooltips } from \"../../mint/components/MintHelpers\";\nimport { useSelectedChainWallet } from \"../../wallet/walletHooks\";\nimport { getFeeTooltips, TxType } from \"../transactionsUtils\";\n\ntype TransactionFeesProps = {\n  type: TxType;\n  currency: BridgeCurrency;\n  amount: number;\n  chain: BridgeChain;\n  address?: string;\n};\n\nexport const TransactionFees: FunctionComponent<TransactionFeesProps> = ({\n  amount,\n  currency,\n  type,\n  chain,\n  address,\n}) => {\n  const { status } = useSelectedChainWallet();\n  const currencyConfig = getCurrencyConfig(currency);\n  const exchangeRates = useSelector($exchangeRates);\n  const gasPrices = useSelector($gasPrices);\n  const currencyUsdRate = findExchangeRate(exchangeRates, currency, USD_SYMBOL);\n  const gasPrice = findGasPrice(gasPrices, chain);\n  const targetChainConfig = getChainConfig(chain);\n\n  const targetChainCurrencyUsdRate = findExchangeRate(\n    exchangeRates,\n    targetChainConfig.nativeCurrency,\n    USD_SYMBOL\n  );\n  const amountUsd = amount * currencyUsdRate;\n  const { fees, pending } = useFetchFees(currency, type);\n  const { renVMFee, renVMFeeAmount, networkFee } = getTransactionFees({\n    amount,\n    fees,\n    type,\n  });\n  const renVMFeeAmountUsd = amountUsd * renVMFee;\n  const networkFeeUsd = networkFee * currencyUsdRate;\n\n  const sourceCurrency =\n    type === TxType.MINT ? currency : toReleasedCurrency(currency);\n  const sourceCurrencyConfig = getCurrencyConfig(sourceCurrency);\n  const sourceCurrencyChainConfig = getChainConfig(\n    sourceCurrencyConfig.sourceChain\n  );\n\n  const tooltips = getFeeTooltips({\n    mintFee: fees.mint / 10000,\n    releaseFee: fees.burn / 10000,\n    sourceCurrency,\n    chain,\n  });\n\n  const feeInGwei = Math.ceil(MINT_GAS_UNIT_COST * gasPrice * 1.18); // gas price to real gas price adjustment\n  const targetChainFeeNative = fromGwei(feeInGwei);\n  const targetChainFeeUsd = fromGwei(feeInGwei) * targetChainCurrencyUsdRate;\n  const targetChainCurrency = getCurrencyConfig(\n    targetChainConfig.nativeCurrency\n  );\n\n  if (status !== WalletStatus.CONNECTED) {\n    return null;\n  }\n  if (pending) {\n    return <CenteredProgress />;\n  }\n  return (\n    <>\n      <Debug it={{ currency, fees }} />\n      <LabelWithValue\n        label=\"RenVM Fee\"\n        labelTooltip={tooltips.renVmFee}\n        value={\n          <NumberFormatText\n            value={renVMFeeAmount}\n            spacedSuffix={currencyConfig.short}\n            decimalScale={8}\n          />\n        }\n        valueEquivalent={\n          <NumberFormatText\n            value={renVMFeeAmountUsd}\n            prefix=\"$\"\n            decimalScale={2}\n            fixedDecimalScale\n          />\n        }\n      />\n      <LabelWithValue\n        label={`${sourceCurrencyChainConfig.full} Miner Fee`}\n        labelTooltip={tooltips.sourceChainMinerFee}\n        value={\n          <NumberFormatText\n            value={networkFee}\n            spacedSuffix={sourceCurrencyChainConfig.short}\n          />\n        }\n        valueEquivalent={\n          <NumberFormatText\n            value={networkFeeUsd}\n            prefix=\"$\"\n            decimalScale={2}\n            fixedDecimalScale\n          />\n        }\n      />\n      <LabelWithValue\n        label={`Esti. ${targetChainConfig.short} Fee`}\n        labelTooltip={tooltips.renCurrencyChainFee}\n        value={\n          <NumberFormatText\n            value={targetChainFeeNative}\n            spacedSuffix={targetChainCurrency.short}\n            decimalScale={4}\n          />\n        }\n        valueEquivalent={\n          <NumberFormatText\n            value={targetChainFeeUsd}\n            prefix=\"$\"\n            decimalScale={2}\n            fixedDecimalScale\n          />\n        }\n      />\n      {address && (\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n      )}\n    </>\n  );\n};\n","import { useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { useLocation } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport {\n  BridgeChain,\n  EthTestnet,\n  getCurrencyConfig,\n  isMainnetNetwork,\n  toMintedCurrency,\n} from '../../utils/assetConfigs'\nimport { $mintCurrency } from '../mint/mintSlice'\nimport { $renNetwork } from '../network/networkSlice'\nimport { $releaseCurrency } from '../release/releaseSlice'\nimport { $chain } from '../wallet/walletSlice'\nimport { setPaperShaking } from './uiSlice'\n\nexport const useShakePaper = (shake: boolean, timeout = 600) => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (shake) {\n      dispatch(setPaperShaking(true));\n      setTimeout(() => {\n        dispatch(setPaperShaking(false));\n      }, timeout);\n    }\n    return () => {\n      dispatch(setPaperShaking(false));\n    };\n  }, [dispatch, shake, timeout]);\n};\n\nexport const useLocationFlow = () => {\n  const location = useLocation();\n  if (location.pathname.indexOf(paths.MINT) > -1) {\n    return \"mint\";\n  } else if (location.pathname.indexOf(paths.RELEASE) > -1) {\n    return \"burn\";\n  }\n  return null;\n};\n\nexport const useSubNetworkName = () => {\n  const flow = useLocationFlow();\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const mintCurrency = useSelector($mintCurrency);\n  const releaseCurrency = useSelector($releaseCurrency);\n  if (\n    chain !== BridgeChain.ETHC ||\n    flow == null ||\n    isMainnetNetwork(renNetwork)\n  ) {\n    return \"\";\n  }\n  const renCurrency =\n    flow === \"mint\" ? toMintedCurrency(mintCurrency) : releaseCurrency;\n  const currencyConfig = getCurrencyConfig(renCurrency);\n  return currencyConfig.ethTestnet || EthTestnet.KOVAN;\n};\n","import {\n  Checkbox,\n  Divider,\n  FormControl,\n  FormControlLabel,\n  FormLabel,\n  IconButton,\n  Typography,\n} from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport { CheckboxWrapper } from \"../../../components/inputs/InputHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport { TooltipWithIcon } from \"../../../components/tooltips/TooltipWithIcon\";\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toMintedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $exchangeRates } from \"../../marketData/marketDataSlice\";\nimport { findExchangeRate } from \"../../marketData/marketDataUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  $currentSessionCount,\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport { useShakePaper } from \"../../ui/uiHooks\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport { $wallet, setWalletPickerOpened } from \"../../wallet/walletSlice\";\nimport {\n  getMintDynamicTooltips,\n  mintTooltips,\n} from \"../components/MintHelpers\";\nimport { $mint } from \"../mintSlice\";\nimport {\n  createMintTransaction,\n  preValidateMintTransaction,\n} from \"../mintUtils\";\n\nexport const MintFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { status, walletConnected, account } = useSelectedChainWallet();\n  const [mintingInitialized, setMintingInitialized] = useState(false);\n  const { amount, currency } = useSelector($mint);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const currentSessionCount = useSelector($currentSessionCount);\n  const exchangeRates = useSelector($exchangeRates);\n  const { fees, pending } = useFetchFees(currency, TxType.MINT);\n  const currencyUsdRate = findExchangeRate(exchangeRates, currency);\n\n  const amountUsd = amount * currencyUsdRate;\n  const { conversionTotal } = getTransactionFees({\n    amount,\n    fees,\n    type: TxType.MINT,\n  });\n\n  const lockCurrencyConfig = getCurrencyConfig(currency);\n  const { GreyIcon } = lockCurrencyConfig;\n\n  const targetCurrencyAmountUsd = conversionTotal * currencyUsdRate;\n  const destinationChainConfig = getChainConfig(chain);\n  const destinationChainNativeCurrencyConfig = getCurrencyConfig(\n    destinationChainConfig.nativeCurrency\n  );\n  const mintDynamicTooltips = getMintDynamicTooltips(\n    destinationChainConfig,\n    destinationChainNativeCurrencyConfig\n  );\n  const mintedCurrency = toMintedCurrency(currency);\n\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrency);\n\n  const [ackChecked, setAckChecked] = useState(false);\n  const [touched, setTouched] = useState(false);\n  const showAckError = !ackChecked && touched;\n  const handleAckCheckboxChange = useCallback((event) => {\n    setTouched(true);\n    setAckChecked(event.target.checked);\n  }, []);\n  useShakePaper(showAckError);\n\n  const tx = useMemo(\n    () =>\n      createMintTransaction({\n        amount: amount,\n        currency: currency,\n        destAddress: account,\n        mintedCurrency: toMintedCurrency(currency),\n        mintedCurrencyChain: chain,\n        userAddress: account,\n        network: network,\n        dayIndex: currentSessionCount,\n      }),\n    [amount, currency, account, chain, network, currentSessionCount]\n  );\n  const txValid = preValidateMintTransaction(tx);\n  const canInitializeMinting = ackChecked && txValid;\n\n  const handleConfirm = useCallback(() => {\n    if (status === WalletStatus.CONNECTED) {\n      setTouched(true);\n      if (canInitializeMinting) {\n        setMintingInitialized(true);\n      } else {\n        setMintingInitialized(false);\n      }\n    } else {\n      setTouched(false);\n      setMintingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, status, canInitializeMinting]);\n\n  const onMintTxCreated = useCallback(\n    async (tx) => {\n      const dbTx = { ...tx };\n      await db.addTx(dbTx, account, signature);\n\n      dispatch(setCurrentTxId(tx.id));\n      dispatch(addTransaction(tx));\n      history.push({\n        pathname: paths.MINT_TRANSACTION,\n        search: \"?\" + createTxQueryString(tx),\n        state: {\n          txState: { newTx: true },\n        } as LocationTxState,\n      });\n    },\n    [dispatch, history, account, signature]\n  );\n\n  // there is a dependency loop, because we depend on the number\n  // of txes to determine the dayIndex, which updates when we create\n  // a new tx, leading to multiple txes being created for the same\n  // parameters.\n  // This flag prevents that\n  const [creatingMintTx, setCreatingMintTx] = useState(false);\n\n  useEffect(() => {\n    if (mintingInitialized && !creatingMintTx) {\n      setCreatingMintTx(true);\n      onMintTxCreated(tx).finally();\n    }\n  }, [onMintTxCreated, mintingInitialized, tx, creatingMintTx]);\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        <BigAssetAmountWrapper>\n          <BigAssetAmount\n            value={<NumberFormatText value={amount} spacedSuffix={currency} />}\n          />\n        </BigAssetAmountWrapper>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <LabelWithValue\n          label=\"Sending\"\n          labelTooltip={mintTooltips.sending}\n          value={<NumberFormatText value={amount} spacedSuffix={currency} />}\n          valueEquivalent={\n            <NumberFormatText\n              value={amountUsd}\n              spacedSuffix=\"USD\"\n              decimalScale={2}\n              fixedDecimalScale\n            />\n          }\n        />\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={mintTooltips.to}\n          value={destinationChainConfig.full}\n        />\n        <LabelWithValue\n          label=\"Recipient Address\"\n          labelTooltip={mintTooltips.recipientAddress}\n          value={\n            <MiddleEllipsisText hoverable>{tx.userAddress}</MiddleEllipsisText>\n          }\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          amount={amount}\n          currency={currency}\n          type={TxType.MINT}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        {walletConnected &&\n          (pending ? (\n            <CenteredProgress />\n          ) : (\n            <AssetInfo\n              label=\"Receiving\"\n              value={\n                <NumberFormatText\n                  value={conversionTotal}\n                  spacedSuffix={mintedCurrencyConfig.short}\n                />\n              }\n              valueEquivalent={\n                <NumberFormatText\n                  prefix=\" = $\"\n                  value={targetCurrencyAmountUsd}\n                  spacedSuffix=\"USD\"\n                  decimalScale={2}\n                  fixedDecimalScale\n                />\n              }\n              Icon={<GreyIcon fontSize=\"inherit\" />}\n            />\n          ))}\n        <CheckboxWrapper>\n          <FormControl error={showAckError}>\n            <FormControlLabel\n              control={\n                <Checkbox\n                  checked={ackChecked}\n                  onChange={handleAckCheckboxChange}\n                  name=\"ack\"\n                  color=\"primary\"\n                />\n              }\n              label={\n                <FormLabel htmlFor=\"ack\" component={Typography}>\n                  <Typography\n                    variant=\"caption\"\n                    color={showAckError ? \"inherit\" : \"textPrimary\"}\n                  >\n                    I acknowledge this transaction requires{\" \"}\n                    {destinationChainNativeCurrencyConfig.short}{\" \"}\n                    <TooltipWithIcon title={mintDynamicTooltips.acknowledge} />\n                  </Typography>\n                </FormLabel>\n              }\n            />\n          </FormControl>\n        </CheckboxWrapper>\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleConfirm}\n            disabled={!ackChecked || mintingInitialized || !walletConnected}\n          >\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : mintingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n","import {\n  Box,\n  ListSubheader,\n  MenuItem,\n  Select,\n  SelectProps,\n  styled,\n  Typography,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent, useMemo } from \"react\";\nimport { AssetBalance } from \"../../features/wallet/walletSlice\";\nimport { getAssetBalance } from \"../../features/wallet/walletUtils\";\nimport {\n  BridgeChain,\n  BridgeChainConfig,\n  BridgeCurrency,\n  chainsConfig,\n  currenciesConfig,\n  CurrencyConfig,\n} from \"../../utils/assetConfigs\";\nimport { NumberFormatText } from \"../formatting/NumberFormatText\";\nimport { EmptyCircleIcon } from \"../icons/RenIcons\";\n\nconst getOptions = (mode: AssetDropdownMode) => {\n  const options =\n    mode === \"chain\"\n      ? Object.values(chainsConfig)\n      : Object.values(currenciesConfig);\n  return options as Array<BridgeChainConfig | CurrencyConfig>;\n};\n\nconst getOptionBySymbol = (symbol: string, mode: AssetDropdownMode) =>\n  getOptions(mode).find((option) => option.symbol === symbol);\n\nconst createAvailabilityFilter = (available: Array<string> | undefined) => (\n  option: BridgeChainConfig | CurrencyConfig\n) => {\n  if (!available) {\n    return true;\n  }\n  return available.includes(option.symbol);\n};\n\nconst iconStyles = {\n  width: 32,\n  height: 32,\n};\n\nconst useCondensedSelectStyles = makeStyles(() => ({\n  select: {\n    paddingTop: 4,\n    paddingBottom: 4,\n  },\n}));\n\nconst useAssetDropdownStyles = makeStyles((theme) => ({\n  root: {\n    width: \"100%\",\n    borderRadius: theme.shape.borderRadius,\n    border: `1px solid ${theme.palette.divider}`,\n  },\n  inputRoot: {\n    width: \"100%\",\n  },\n  supplementalText: {\n    fontSize: 12,\n  },\n  iconWrapper: {\n    display: \"inline-flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  listIcon: iconStyles,\n  assetName: {\n    fontSize: 13,\n  },\n  assetFullName: {\n    fontSize: 11,\n  },\n  balance: {\n    fontSize: 12,\n  },\n  listSubheader: {\n    pointerEvents: \"none\",\n    fontSize: 10,\n    lineHeight: 1,\n  },\n  listSubheaderLabel: {\n    fontSize: 10,\n  },\n}));\n\ntype AssetDropdownMode = \"send\" | \"receive\" | \"chain\"; // TODO: remove recaive\n\ntype AssetDropdownProps = SelectProps & {\n  mode: AssetDropdownMode;\n  available?: Array<BridgeCurrency | BridgeChain>;\n  balances?: Array<AssetBalance>;\n  condensed?: boolean;\n  label?: string;\n};\n\nconst getAssetData = (\n  selected: BridgeChainConfig | CurrencyConfig | undefined\n) => {\n  let full = \"Select\";\n  let short = \"Select\";\n  let Icon = EmptyCircleIcon;\n  if (selected) {\n    full = selected.full;\n    short = selected.short;\n    Icon = selected.MainIcon;\n  }\n  return {\n    full,\n    short,\n    Icon,\n  };\n};\n\nexport const AssetDropdown: FunctionComponent<AssetDropdownProps> = ({\n  mode,\n  available,\n  condensed = false,\n  label,\n  balances,\n  ...rest\n}) => {\n  const styles = useAssetDropdownStyles();\n  const condensedSelectClasses = useCondensedSelectStyles();\n  const availabilityFilter = useMemo(\n    () => createAvailabilityFilter(available),\n    [available]\n  );\n  const valueRenderer = useMemo(\n    () => (value: any) => {\n      const selected = getOptionBySymbol(value, mode);\n      const { Icon, full, short } = getAssetData(selected);\n      return (\n        <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n          {!condensed && (\n            <Box width=\"37%\">\n              <Typography variant=\"body2\" className={styles.supplementalText}>\n                {label}\n              </Typography>\n            </Box>\n          )}\n          <Box width=\"45px\" display=\"flex\" alignItems=\"center\">\n            <Icon className={styles.listIcon} />\n          </Box>\n          <Box flexGrow={1}>\n            <Typography variant=\"body2\">\n              {selected && mode === \"chain\" ? full : short}\n            </Typography>\n          </Box>\n        </Box>\n      );\n    },\n    [mode, styles, label, condensed]\n  );\n  return (\n    <div>\n      <Select\n        variant=\"outlined\"\n        className={condensed ? undefined : styles.inputRoot}\n        classes={condensed ? condensedSelectClasses : undefined}\n        renderValue={valueRenderer}\n        displayEmpty\n        MenuProps={{\n          anchorOrigin: {\n            vertical: \"bottom\",\n            horizontal: \"left\",\n          },\n          getContentAnchorEl: null,\n        }}\n        {...rest}\n      >\n        <ListSubheader className={styles.listSubheader}>\n          <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n            <Box width=\"45px\" />\n            <Box flexGrow={1}>\n              <Typography\n                variant=\"overline\"\n                className={styles.listSubheaderLabel}\n              >\n                {mode === \"chain\" ? \"Blockchain\" : \"Asset\"}\n              </Typography>\n            </Box>\n            {balances && balances.length > 0 && (\n              <Box flexGrow={1} textAlign=\"right\">\n                <Typography\n                  variant=\"overline\"\n                  className={styles.listSubheaderLabel}\n                >\n                  Your Balance\n                </Typography>\n              </Box>\n            )}\n          </Box>\n        </ListSubheader>\n        {getOptions(mode)\n          .filter(availabilityFilter)\n          .map(({ symbol, MainIcon, GreyIcon, full, short }) => {\n            return (\n              <MenuItem key={symbol} value={symbol}>\n                <Box display=\"flex\" alignItems=\"center\" width=\"100%\">\n                  <Box width=\"45px\" className={styles.iconWrapper}>\n                    <MainIcon className={styles.listIcon} />\n                  </Box>\n                  <Box flexGrow={1}>\n                    <Typography variant=\"body1\" className={styles.assetName}>\n                      {mode === \"chain\" ? full : short}\n                    </Typography>\n                    {mode !== \"chain\" && (\n                      <Typography\n                        color=\"textSecondary\"\n                        className={styles.assetFullName}\n                      >\n                        {full}\n                      </Typography>\n                    )}\n                  </Box>\n                  {balances && (\n                    <Box\n                      flexGrow={1}\n                      textAlign=\"right\"\n                      className={styles.balance}\n                    >\n                      <NumberFormatText\n                        value={getAssetBalance(\n                          balances,\n                          symbol as BridgeCurrency\n                        )}\n                      />\n                    </Box>\n                  )}\n                </Box>\n              </MenuItem>\n            );\n          })}\n      </Select>\n    </div>\n  );\n};\n\nexport const AssetDropdownWrapper = styled(\"div\")({\n  marginTop: 10,\n});\n","export const generatePlaceholderStyles = (color: string) => {\n  const placeholder = {\n    color,\n  };\n\n  return {\n    \"&::placeholder\": placeholder,\n    \"&::-webkit-input-placeholder\": placeholder,\n    \"&::-moz-placeholder\": placeholder, // Firefox 19+\n    \"&:-ms-input-placeholder\": placeholder, // IE 11\n    \"&::-ms-input-placeholder\": placeholder, // Edge\n  };\n};\n\n","import { Typography } from '@material-ui/core'\nimport { makeStyles, styled } from '@material-ui/core/styles'\nimport classNames from 'classnames'\nimport React, { FunctionComponent, ReactNode, useRef } from 'react'\nimport NumberFormat, { NumberFormatValues } from 'react-number-format'\nimport { generatePlaceholderStyles } from '../../theme/themeUtils'\nimport { numberFormatOptions, toUsdFormat } from '../../utils/formatters'\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    width: \"100%\",\n    textAlign: \"center\",\n    \"& input\": {\n      fontFamily: \"inherit\",\n    },\n  },\n  large: {\n    \"& input\": {\n      fontSize: 52,\n    },\n  },\n  medium: {\n    \"& input\": {\n      fontSize: 42,\n    },\n  },\n  small: {\n    \"& input\": {\n      fontSize: 32,\n    },\n  },\n  smallest: {\n    \"& input\": {\n      fontSize: 22,\n    },\n  },\n  input: {\n    fontSize: 52,\n    width: \"100%\",\n    outline: \"none\",\n    textAlign: \"center\",\n    border: \"0px solid transparent\",\n    color: theme.customColors.textDark,\n    ...generatePlaceholderStyles(theme.customColors.grayPlaceholder),\n  },\n  inputError: {\n    color: theme.palette.error.main,\n  },\n  errorText: {\n    marginTop: -8,\n    marginBottom: 10,\n  },\n  equivalent: {\n    marginTop: 0,\n    color: \"#3F3F48\",\n  },\n}));\n\ntype NumberChange = (values: NumberFormatValues) => void;\n\ntype BigCurrencyInputProps = {\n  onChange: (value: any) => void;\n  symbol: string;\n  usdValue: string | number;\n  value: string | number;\n  placeholder?: string;\n  errorText?: string | ReactNode;\n};\n\nexport const BigCurrencyInput: FunctionComponent<BigCurrencyInputProps> = ({\n  onChange,\n  symbol,\n  usdValue,\n  value,\n  errorText = \"\",\n  placeholder = `0 ${symbol}`,\n}) => {\n  const styles = useStyles();\n  const ref = useRef(null);\n  const inputRef = useRef(null);\n  const val = value ? String(value) : \"\";\n  const handleChange: NumberChange = (formatValues) => {\n    onChange(formatValues.value);\n  };\n\n  const chars = val.replace(\".\", \"\") + \" \" + symbol;\n  let size = \"large\";\n  if (chars.length > 10 && chars.length <= 12) {\n    size = \"medium\";\n  } else if (chars.length > 12 && chars.length <= 14) {\n    size = \"small\";\n  } else if (chars.length > 14) {\n    size = \"smallest\";\n  }\n\n  const rootClassName = classNames(styles.container, {\n    [styles.large]: size === \"large\",\n    [styles.medium]: size === \"medium\",\n    [styles.small]: size === \"small\",\n    [styles.smallest]: size === \"smallest\",\n  });\n  const inputClassName = classNames(styles.input, {\n    [styles.inputError]: Boolean(errorText),\n  });\n  return (\n    <div className={rootClassName}>\n      <NumberFormat\n        value={val}\n        ref={ref}\n        {...numberFormatOptions}\n        suffix={\" \" + symbol}\n        onValueChange={handleChange}\n        getInputRef={(input: any) => {\n          inputRef.current = input;\n        }}\n        autoFocus={true}\n        className={inputClassName}\n        placeholder={placeholder}\n      />\n      {errorText && (\n        <Typography\n          variant=\"body2\"\n          color=\"error\"\n          gutterBottom\n          className={styles.errorText}\n        >\n          {errorText}\n        </Typography>\n      )}\n      {<p className={styles.equivalent}>= {toUsdFormat(usdValue)}</p>}\n    </div>\n  );\n};\n\nexport const BigCurrencyInputWrapper = styled(\"div\")({\n  marginTop: 40,\n});\n","import { Divider } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ActionButton, ActionButtonWrapper, } from '../../../components/buttons/Buttons'\nimport { AssetDropdown, AssetDropdownWrapper, } from '../../../components/dropdowns/AssetDropdown'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport { BigCurrencyInput, BigCurrencyInputWrapper, } from '../../../components/inputs/BigCurrencyInput'\nimport { PaperContent } from '../../../components/layout/Paper'\nimport { CenteredProgress } from '../../../components/progress/ProgressHelpers'\nimport { TooltipWithIcon } from '../../../components/tooltips/TooltipWithIcon'\nimport { AssetInfo } from '../../../components/typography/TypographyHelpers'\nimport {\n  getCurrencyConfig,\n  supportedLockCurrencies,\n  supportedMintDestinationChains,\n  toMintedCurrency,\n} from '../../../utils/assetConfigs'\nimport { useFetchFees } from '../../fees/feesHooks'\nimport { getTransactionFees } from '../../fees/feesUtils'\nimport { useRenNetworkTracker } from '../../transactions/transactionsHooks'\nimport { isMinimalAmount, TxConfigurationStepProps, TxType, } from '../../transactions/transactionsUtils'\nimport { useSelectedChainWallet } from '../../wallet/walletHooks'\nimport { $wallet, setChain, setWalletPickerOpened, } from '../../wallet/walletSlice'\nimport { $mint, $mintUsdAmount, setMintAmount, setMintCurrency, } from '../mintSlice'\n\nexport const MintInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n\n  const { currency, amount } = useSelector($mint);\n  const { chain } = useSelector($wallet);\n  const { walletConnected } = useSelectedChainWallet();\n  const { fees, pending } = useFetchFees(currency, TxType.MINT);\n  const { conversionTotal } = getTransactionFees({\n    amount,\n    type: TxType.MINT,\n    fees,\n  });\n  const currencyUsdValue = useSelector($mintUsdAmount);\n\n  const handleAmountChange = useCallback(\n    (value) => {\n      dispatch(setMintAmount(value));\n    },\n    [dispatch]\n  );\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setMintCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const renCurrency = toMintedCurrency(currency);\n  useRenNetworkTracker(renCurrency);\n\n  const hasMinimalAmount = isMinimalAmount(\n    amount,\n    conversionTotal,\n    TxType.MINT\n  );\n  const basicCondition = !!amount && amount > 0 && !pending;\n  const enabled = basicCondition && hasMinimalAmount;\n\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    } else {\n      if (onNext && enabled) {\n        onNext();\n      }\n    }\n  }, [dispatch, onNext, walletConnected, enabled]);\n\n  const mintedCurrencySymbol = toMintedCurrency(currency);\n  const mintedCurrencyConfig = getCurrencyConfig(mintedCurrencySymbol);\n  const { GreyIcon } = mintedCurrencyConfig;\n\n  return (\n    <>\n      <PaperContent bottomPadding>\n        <BigCurrencyInputWrapper>\n          <BigCurrencyInput\n            onChange={handleAmountChange}\n            symbol={currency}\n            usdValue={currencyUsdValue}\n            value={amount}\n            errorText={\n              basicCondition && !hasMinimalAmount ? (\n                <span>\n                  Amount too low{\" \"}\n                  <TooltipWithIcon title=\"After fees have been applied, the amount you will receive is too little.\" />\n                </span>\n              ) : (\n                \"\"\n              )\n            }\n          />\n        </BigCurrencyInputWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Send\"\n            mode=\"send\"\n            available={supportedLockCurrencies}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Destination\"\n            mode=\"chain\"\n            available={supportedMintDestinationChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        {walletConnected &&\n          (pending ? (\n            <CenteredProgress />\n          ) : (\n            <AssetInfo\n              label=\"Receiving:\"\n              value={\n                <NumberFormatText\n                  value={conversionTotal}\n                  spacedSuffix={mintedCurrencyConfig.short}\n                />\n              }\n              Icon={<GreyIcon fontSize=\"inherit\" />}\n            />\n          ))}\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  Button,\n  ButtonProps,\n  Theme,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport AccountBalanceWalletIcon from \"@material-ui/icons/AccountBalanceWallet\";\nimport { WalletPickerProps } from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport { useTimeout } from \"react-use\";\nimport { useSubNetworkName } from \"../../features/ui/uiHooks\";\nimport { createPulseAnimation } from \"../../theme/animationUtils\";\nimport { defaultShadow } from \"../../theme/other\";\nimport {\n  BridgeChainConfig,\n  BridgeWallet,\n  BridgeWalletConfig,\n  getChainConfigByRentxName,\n  getNetworkConfigByRentxName,\n  getWalletConfig,\n  getWalletConfigByRentxName,\n} from \"../../utils/assetConfigs\";\nimport { trimAddress } from \"../../utils/strings\";\nimport { WalletIcon } from \"../icons/RenIcons\";\nimport { PaperContent } from \"../layout/Paper\";\nimport { BridgeModalTitle } from \"../modals/BridgeModal\";\nimport {\n  ProgressWithContent,\n  ProgressWrapper,\n} from \"../progress/ProgressHelpers\";\nimport { Debug, DebugComponentProps } from \"../utils/Debug\";\nimport { WalletConnectionStatusType, WalletStatus } from \"../utils/types\";\n\nexport const useWalletPickerStyles = makeStyles((theme) => ({\n  root: {\n    width: 400,\n    minHeight: 441,\n  },\n  body: {\n    padding: 24,\n  },\n  header: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"stretch\",\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    padding: `16px 16px 14px`,\n  },\n  headerTitle: {\n    flexGrow: 2,\n    paddingLeft: 16,\n    textAlign: \"center\",\n    lineHeight: 2,\n  },\n  headerCloseIcon: {\n    fontSize: 16,\n  },\n  button: {\n    border: `1px solid ${theme.palette.divider}`,\n  },\n  chainTitle: {\n    textTransform: \"capitalize\",\n    fontSize: 14,\n  },\n}));\n\nconst useWalletEntryButtonStyles = makeStyles({\n  root: {\n    marginTop: 20,\n    fontSize: 16,\n    padding: \"11px 20px 11px 20px\",\n  },\n  label: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignContent: \"center\",\n  },\n  icon: {\n    fontSize: 36,\n    display: \"inline-flex\",\n  },\n});\n\nexport const WalletEntryButton: WalletPickerProps<\n  any,\n  any\n>[\"WalletEntryButton\"] = ({ onClick, name, logo }) => {\n  const { icon: iconClassName, ...classes } = useWalletEntryButtonStyles();\n  const walletConfig = getWalletConfigByRentxName(name);\n  const { MainIcon } = walletConfig;\n  return (\n    <Button\n      classes={classes}\n      variant=\"outlined\"\n      size=\"large\"\n      fullWidth\n      onClick={onClick}\n    >\n      <span>{walletConfig.full}</span>{\" \"}\n      <span className={iconClassName}>\n        <MainIcon fontSize=\"inherit\" />\n      </span>\n    </Button>\n  );\n};\n\nexport const WalletChainLabel: WalletPickerProps<\n  any,\n  any\n>[\"WalletChainLabel\"] = ({ chain }) => {\n  const chainConfig = getChainConfigByRentxName(chain);\n  return <span>{chainConfig.full}</span>;\n};\n\nconst getLabels = (\n  chainConfig: BridgeChainConfig,\n  walletConfig: BridgeWalletConfig\n) => {\n  return {\n    initialTitle: \"Connecting\",\n    actionTitle: `${walletConfig.short} action required`,\n    initialMessage: `Connecting to ${chainConfig.full}`,\n    actionMessage: `When prompted, connect securely via the ${walletConfig.full} browser extension.`,\n  };\n};\n\nexport const WalletConnectingInfo: WalletPickerProps<\n  any,\n  any\n>[\"ConnectingInfo\"] = ({ chain, onClose }) => {\n  const theme = useTheme();\n  const chainConfig = getChainConfigByRentxName(chain);\n\n  // TODO: There should be better mapping.\n  const walletSymbol =\n    chain === \"ethereum\" ? BridgeWallet.METAMASKW : BridgeWallet.BINANCESMARTW;\n  const walletConfig = getWalletConfig(walletSymbol);\n\n  const labels = getLabels(chainConfig, walletConfig);\n  const { MainIcon } = walletConfig;\n  const [isPassed] = useTimeout(3000);\n  const passed = isPassed();\n  return (\n    <>\n      <Debug it={{ chainConfig }} />\n      <BridgeModalTitle\n        title={passed ? labels.actionTitle : labels.initialTitle}\n        onClose={onClose}\n      />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.skyBlueLight}\n            fontSize=\"big\"\n            processing\n          >\n            <MainIcon fontSize=\"inherit\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h6\" align=\"center\">\n          {passed ? labels.actionMessage : labels.initialMessage}\n        </Typography>\n      </PaperContent>\n    </>\n  );\n};\n\nconst useWalletConnectionProgressStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    borderRadius: \"50%\",\n    padding: 13,\n    backgroundColor: theme.palette.divider,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    fontSize: 44,\n  },\n}));\n\nexport const WalletConnectionProgress: FunctionComponent = () => {\n  const theme = useTheme();\n  const styles = useWalletConnectionProgressStyles();\n  return (\n    <ProgressWithContent color={theme.customColors.redLighter} size={128}>\n      <div className={styles.iconWrapper}>\n        <WalletIcon fontSize=\"inherit\" color=\"secondary\" />\n      </div>\n    </ProgressWithContent>\n  );\n};\n\nexport const WalletWrongNetworkInfo: WalletPickerProps<\n  any,\n  any\n>[\"WrongNetworkInfo\"] = (props) => {\n  const { chain, targetNetwork, onClose } = props;\n  const theme = useTheme();\n  const subNetworkName = useSubNetworkName();\n  const chainName = getChainConfigByRentxName(chain).full;\n  const networkName = getNetworkConfigByRentxName(targetNetwork).full;\n  return (\n    <>\n      <DebugComponentProps {...props} />\n      <BridgeModalTitle title=\"Wrong Network\" onClose={onClose} />\n      <PaperContent bottomPadding>\n        <ProgressWrapper>\n          <ProgressWithContent\n            size={128}\n            color={theme.customColors.redLighter}\n            fontSize=\"big\"\n          >\n            <AccountBalanceWalletIcon fontSize=\"inherit\" color=\"secondary\" />\n          </ProgressWithContent>\n        </ProgressWrapper>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Switch to {chainName} {networkName}\n          {subNetworkName && <span> ({subNetworkName})</span>}\n        </Typography>\n        <Typography variant=\"body1\" align=\"center\" color=\"textSecondary\">\n          RenBridge requires you to connect to the {chainName} {networkName}{\" \"}\n          {subNetworkName}\n        </Typography>\n      </PaperContent>\n    </>\n  );\n};\n\nconst createIndicatorClass = (className: string, color: string) => {\n  const { pulsingStyles, pulsingKeyframes } = createPulseAnimation(\n    color,\n    3,\n    className\n  );\n\n  return {\n    ...pulsingKeyframes,\n    [className]: {\n      ...pulsingStyles,\n      backgroundColor: color,\n    },\n  };\n};\n\ntype WalletConnectionIndicatorStyles = Record<\n  \"root\" | \"connected\" | \"disconnected\" | \"wrongNetwork\" | \"connecting\",\n  string\n>;\nconst useWalletConnectionIndicatorStyles = makeStyles((theme) => {\n  return {\n    root: {\n      width: 8,\n      height: 8,\n      borderRadius: 4,\n      backgroundColor: theme.palette.divider,\n    },\n    ...createIndicatorClass(\"connected\", theme.palette.success.main),\n    ...createIndicatorClass(\"disconnected\", theme.palette.error.main),\n    ...createIndicatorClass(\"connecting\", theme.palette.info.main),\n    ...createIndicatorClass(\"wrongNetwork\", theme.palette.warning.main),\n  };\n});\n\ntype WalletConnectionIndicatorProps = {\n  status?: WalletConnectionStatusType;\n  className?: string; // TODO: find a better way\n};\n\nexport const WalletConnectionIndicator: FunctionComponent<WalletConnectionIndicatorProps> = ({\n  status,\n  className: classNameProp,\n}) => {\n  const styles = useWalletConnectionIndicatorStyles() as WalletConnectionIndicatorStyles;\n  const className = classNames(styles.root, classNameProp, {\n    [styles.connected]: status === WalletStatus.CONNECTED,\n    [styles.wrongNetwork]: status === WalletStatus.WRONG_NETWORK,\n    [styles.disconnected]: status === WalletStatus.DISCONNECTED,\n    [styles.connecting]: status === WalletStatus.CONNECTING,\n  });\n  return <div className={className} />;\n};\n\nconst getWalletConnectionLabel = (status: WalletConnectionStatusType) => {\n  switch (status) {\n    case \"disconnected\":\n      return \"Connect a Wallet\";\n    case \"connecting\":\n      return \"Connecting...\";\n    case \"connected\":\n      return \"Connected\";\n    case \"wrong_network\":\n      return \"Wrong Network!\";\n  }\n};\n\nconst useWalletConnectionStatusButtonStyles = makeStyles<Theme>((theme) => ({\n  root: {\n    backgroundColor: theme.palette.common.white,\n    borderColor: theme.palette.divider,\n    boxShadow: defaultShadow,\n    \"&:hover\": {\n      borderColor: theme.palette.divider,\n      backgroundColor: theme.palette.divider,\n    },\n  },\n  hoisted: {\n    zIndex: theme.zIndex.tooltip,\n  },\n  indicator: {\n    marginRight: 10,\n  },\n  indicatorMobile: {\n    marginLeft: 16,\n    marginRight: 30,\n  },\n  account: { marginLeft: 20 },\n}));\n\ntype WalletConnectionStatusButtonProps = ButtonProps & {\n  status: WalletConnectionStatusType;\n  wallet: BridgeWallet;\n  hoisted?: boolean;\n  account?: string;\n  mobile?: boolean;\n};\n\nexport const WalletConnectionStatusButton: FunctionComponent<WalletConnectionStatusButtonProps> = ({\n  status,\n  account,\n  wallet,\n  hoisted,\n  className,\n  mobile,\n  ...rest\n}) => {\n  const {\n    indicator: indicatorClassName,\n    indicatorMobile: indicatorMobileClassName,\n    account: accountClassName,\n    hoisted: hoistedClassName,\n    ...classes\n  } = useWalletConnectionStatusButtonStyles();\n\n  const label =\n    status === WalletStatus.CONNECTED\n      ? getWalletConfig(wallet).short\n      : getWalletConnectionLabel(status);\n  const trimmedAddress = trimAddress(account);\n  const resolvedClassName = classNames(className, {\n    [hoistedClassName]: hoisted,\n  });\n  const buttonProps: any = mobile\n    ? {}\n    : {\n        variant: \"outlined\",\n        color: \"secondary\",\n        classes,\n      };\n  return (\n    <Button className={resolvedClassName} {...buttonProps} {...rest}>\n      <WalletConnectionIndicator\n        status={status}\n        className={mobile ? indicatorMobileClassName : indicatorClassName}\n      />\n      <span>{label}</span>\n      {trimmedAddress && (\n        <span className={accountClassName}>{trimmedAddress}</span>\n      )}\n    </Button>\n  );\n};\n","import { Button, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { NestedDrawer } from \"../../../components/modals/BridgeModal\";\n\ntype BrowserNotificationsDrawerProps = {\n  open: boolean;\n  onClose: () => void;\n  onEnable: () => void;\n};\n\nexport const BrowserNotificationsDrawer: FunctionComponent<BrowserNotificationsDrawerProps> = ({\n  open,\n  onClose,\n  onEnable,\n}) => {\n  return (\n    <NestedDrawer title=\" \" open={open} onClose={onClose}>\n      <PaperContent topPadding>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Enable browser notifications\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          It will let you track transaction progress.\n        </Typography>\n      </PaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <Button variant=\"text\" color=\"primary\" onClick={onClose}>\n            Do not enable\n          </Button>\n        </ActionButtonWrapper>\n        <ActionButtonWrapper>\n          <ActionButton onClick={onEnable}>\n            Enable Browser Notifications\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </NestedDrawer>\n  );\n};\n","import { useCallback, useState } from \"react\";\n\nexport const useBrowserNotifications = (onEnabled = () => {}) => {\n  let enabled = false;\n  if ((window as any).Notification) {\n    enabled = Notification.permission === \"granted\";\n  }\n\n  const handleEnable = useCallback(() => {\n    if (enabled) {\n      if (onEnabled) {\n        onEnabled();\n      }\n    } else {\n      Notification.requestPermission().then(() => {\n        if (onEnabled) {\n          onEnabled();\n        }\n      });\n    }\n  }, [enabled, onEnabled]);\n\n  const showBrowserNotification = useCallback((message) => {\n    if ((window as any).Notification) {\n      const notification = new Notification(message);\n      notification.onclick = () => {\n        // window.open(location.href); // TODO: TBD: redirect here?\n      };\n    }\n  }, []);\n\n  return {\n    enabled,\n    handleEnable,\n    Notification,\n    showBrowserNotification,\n  };\n};\n\nexport const useBrowserNotificationsConfirmation = () => {\n  const { enabled } = useBrowserNotifications();\n  const [modalOpened, setModalOpened] = useState(false);\n\n  const handleModalOpen = useCallback(() => {\n    if (!enabled) {\n      setModalOpened(true);\n    }\n  }, [enabled]);\n\n  const handleModalClose = useCallback(() => {\n    setModalOpened(false);\n  }, []);\n\n  return {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n  };\n};\n","import {\n  Button,\n  Divider,\n  ListItemIcon,\n  makeStyles,\n  MenuItem,\n  MenuItemProps,\n  Typography,\n} from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  RedButton,\n} from \"../../../components/buttons/Buttons\";\nimport { CircleIcon } from \"../../../components/icons/IconHelpers\";\nimport {\n  AddIcon,\n  CustomSvgIconComponent,\n  DeleteIcon,\n  TxSettingsIcon,\n} from \"../../../components/icons/RenIcons\";\nimport { PaperContent } from \"../../../components/layout/Paper\";\nimport { externalLinkAttributes } from \"../../../components/links/Links\";\nimport {\n  BridgeModalTitle,\n  NestedDrawer,\n} from \"../../../components/modals/BridgeModal\";\n\nconst useTransactionMenuItemStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"8px 20px\",\n    fontSize: 12,\n  },\n  iconWrapper: {\n    minWidth: 32,\n  },\n}));\n\ntype TransactionMenuItemProps = MenuItemProps & {\n  Icon: CustomSvgIconComponent;\n};\n\nexport const TransactionMenuItem: FunctionComponent<TransactionMenuItemProps> = ({\n  onClick,\n  Icon,\n  children,\n  className,\n  button,\n  ...rest\n}) => {\n  const styles = useTransactionMenuItemStyles();\n  return (\n    <MenuItem\n      dense\n      onClick={onClick}\n      className={classNames(styles.root, className)}\n      {...rest}\n    >\n      <ListItemIcon className={styles.iconWrapper}>\n        <CircleIcon Icon={Icon} fontSize=\"small\" variant=\"outlined\" />\n      </ListItemIcon>\n      <Typography variant=\"inherit\">{children}</Typography>\n    </MenuItem>\n  );\n};\n\nconst useTransactionMenuStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 12,\n  },\n  modalTitle: {\n    padding: `12px 20px`,\n  },\n  titleIconWrapper: {\n    minWidth: 32,\n  },\n  menuItems: {\n    paddingTop: 6,\n    minHeight: 150,\n  },\n  transferId: {\n    paddingBottom: 10,\n  },\n}));\n\ntype TransactionMenuProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n  tx: GatewaySession;\n};\n\nexport const TransactionMenu: FunctionComponent<TransactionMenuProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n  tx,\n}) => {\n  const styles = useTransactionMenuStyles();\n  const handleClose = useCallback(() => {\n    if (onClose) {\n      onClose();\n    }\n  }, [onClose]);\n  const [confirmOpen, setConfirmOpen] = useState(false);\n  const handleConfirmClose = useCallback(() => {\n    setConfirmOpen(false);\n  }, []);\n  const handleDeleteWithConfirm = useCallback(() => {\n    setConfirmOpen(true);\n  }, []);\n\n  return (\n    <>\n      <NestedDrawer open={open} onClose={handleClose} className={styles.root}>\n        <BridgeModalTitle className={styles.modalTitle} onClose={handleClose}>\n          <ListItemIcon className={styles.titleIconWrapper}>\n            <CircleIcon\n              Icon={TxSettingsIcon}\n              fontSize=\"small\"\n              variant=\"solid\"\n            />\n          </ListItemIcon>\n          <Typography variant=\"inherit\">Transaction Menu</Typography>\n        </BridgeModalTitle>\n        <div className={styles.menuItems}>\n          <TransactionMenuItem Icon={AddIcon} disabled>\n            Insert/update transaction\n          </TransactionMenuItem>\n          <TransactionMenuItem\n            Icon={DeleteIcon}\n            onClick={handleDeleteWithConfirm}\n          >\n            Delete transaction\n          </TransactionMenuItem>\n        </div>\n        <PaperContent paddingVariant=\"medium\" className={styles.transferId}>\n          <Typography variant=\"inherit\">Transfer ID: {tx.id}</Typography>\n        </PaperContent>\n        <Divider />\n        <PaperContent bottomPadding topPadding paddingVariant=\"medium\">\n          <Button\n            variant=\"outlined\"\n            size=\"small\"\n            href=\"https://renprotocol.typeform.com/to/YdmFyB\"\n            {...externalLinkAttributes}\n          >\n            Report an Issue\n          </Button>\n        </PaperContent>\n      </NestedDrawer>\n      <ConfirmTransactionDeletionDrawer\n        open={confirmOpen}\n        onClose={handleConfirmClose as any}\n        onDeleteTx={onDeleteTx}\n      />\n    </>\n  );\n};\n\ntype ConfirmTransactionDeletionProps = {\n  open: boolean;\n  onClose: () => void;\n  onDeleteTx: () => void;\n};\n\nexport const ConfirmTransactionDeletionDrawer: FunctionComponent<ConfirmTransactionDeletionProps> = ({\n  open,\n  onClose,\n  onDeleteTx,\n}) => {\n  const [deleting, setDeleting] = useState(false);\n  const handleDeleteTx = useCallback(() => {\n    setDeleting(true);\n    onDeleteTx();\n  }, [onDeleteTx]);\n  return (\n    <NestedDrawer title=\"Delete a Transaction\" open={open} onClose={onClose}>\n      <PaperContent topPadding>\n        <Typography variant=\"h5\" align=\"center\" gutterBottom>\n          Are you sure?\n        </Typography>\n        <Typography\n          variant=\"body2\"\n          align=\"center\"\n          color=\"textSecondary\"\n          gutterBottom\n        >\n          If you have already sent your assets you will lose them forever if you\n          remove the transaction.\n        </Typography>\n      </PaperContent>\n      <PaperContent bottomPadding>\n        <ActionButtonWrapper>\n          <RedButton\n            variant=\"text\"\n            color=\"inherit\"\n            startIcon={<DeleteIcon />}\n            onClick={handleDeleteTx}\n            disabled={deleting}\n          >\n            {deleting ? \"Removing...\" : \"Remove\"} Transaction\n          </RedButton>\n        </ActionButtonWrapper>\n        <ActionButtonWrapper>\n          <ActionButton onClick={onClose} disabled={deleting}>\n            Cancel\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </NestedDrawer>\n  );\n};\n","import { Box, Grow, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport QRCode from \"qrcode.react\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n  BigQrCode,\n  CopyContentButton,\n  QrCodeIconButton,\n  TransactionDetailsButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport {\n  BigTopWrapper,\n  CenteringSpacedBox,\n  MediumWrapper,\n  SmallWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { BigAssetAmount } from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport {\n  usePaperTitle,\n  useSetActionRequired,\n  useSetPaperTitle,\n} from \"../../../providers/TitleProviders\";\nimport { orangeLight } from \"../../../theme/colors\";\nimport { getChainConfigByRentxName } from \"../../../utils/assetConfigs\";\nimport { trimAddress } from \"../../../utils/strings\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  HMSCountdown,\n  ProcessingTimeWrapper,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { getPaymentLink, TxType } from \"../../transactions/transactionsUtils\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\nimport { AddressValidityMessage } from \"./MintHelpers\";\n\nexport type MintDepositToProps = {\n  tx: GatewaySession;\n};\n\nexport const MintDepositToStatus: FunctionComponent<MintDepositToProps> = ({\n  tx,\n}) => {\n  const [showQr, setShowQr] = useState(false);\n  const toggleQr = useCallback(() => {\n    setShowQr(!showQr);\n  }, [showQr]);\n  const { showNotification, closeNotification } = useNotifications();\n  const [timeRemained] = useState(getRemainingGatewayTime(tx.expiryTime));\n\n  useEffect(() => {\n    let key = 0;\n    if (timeRemained > 0) {\n      key = showNotification(\n        <AddressValidityMessage\n          milliseconds={timeRemained}\n          destNetwork={getChainConfigByRentxName(tx.destChain).full}\n        />,\n        {\n          variant: \"warning\",\n          persist: true,\n        }\n      ) as number;\n    }\n    return () => {\n      if (key) {\n        closeNotification(key);\n      }\n    };\n  }, [showNotification, tx.destChain, closeNotification, timeRemained]);\n\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    suggestedAmount,\n    mintAddressLink,\n  } = getLockAndMintParams(tx);\n  const { color } = lockCurrencyConfig;\n  const { MainIcon } = lockChainConfig;\n\n  useSetPaperTitle(`Send ${lockChainConfig.short}`);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={color || orangeLight} size={64}>\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <span>\n              Send{\" \"}\n              <NumberFormatText\n                value={suggestedAmount}\n                spacedSuffix={lockCurrencyConfig.short}\n              />{\" \"}\n              to\n            </span>\n          }\n        />\n      </MediumWrapper>\n      {!!tx.gatewayAddress && (\n        <>\n          {showQr && (\n            <CenteringSpacedBox>\n              <Grow in={showQr}>\n                <BigQrCode>\n                  <QRCode\n                    value={getPaymentLink(\n                      lockChainConfig.symbol,\n                      tx.gatewayAddress,\n                      suggestedAmount\n                    )}\n                  />\n                </BigQrCode>\n              </Grow>\n            </CenteringSpacedBox>\n          )}\n          <CopyContentButton content={tx.gatewayAddress} />\n        </>\n      )}\n      <Box\n        mt={2}\n        display=\"flex\"\n        justifyContent=\"center\"\n        flexDirection=\"column\"\n        alignItems=\"center\"\n      >\n        {lockChainConfig.targetConfirmations && (\n          <Typography variant=\"caption\" gutterBottom>\n            Estimated processing time:{\" \"}\n            {lockChainConfig.targetConfirmations * lockChainConfig.blockTime}{\" \"}\n            minutes\n          </Typography>\n        )}\n        <Typography variant=\"caption\">\n          {timeRemained > 0 && (\n            <span>\n              Expires in: <HMSCountdown milliseconds={timeRemained} />\n            </span>\n          )}\n          {timeRemained <= 0 && <span>Expired</span>}\n        </Typography>\n        <Box mt={2}>\n          <QrCodeIconButton onClick={toggleQr} />\n        </Box>\n        <BigTopWrapper>\n          <TransactionDetailsButton\n            label=\"Recipient Address\"\n            isTx={false}\n            address={trimAddress(tx.userAddress, 5)}\n            link={mintAddressLink}\n            size=\"small\"\n          />\n        </BigTopWrapper>\n      </Box>\n    </>\n  );\n};\n\ntype MintDepositConfirmationStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n};\n\nexport const MintDepositConfirmationStatus: FunctionComponent<MintDepositConfirmationStatusProps> = ({\n  tx,\n  depositHash,\n}) => {\n  const [, setTitle] = usePaperTitle();\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxLink,\n    lockTxAmount,\n    lockConfirmations,\n    lockTargetConfirmations,\n    lockProcessingTime,\n  } = getLockAndMintParams(tx, depositHash);\n\n  const { MainIcon } = lockChainConfig;\n\n  const confirmed = lockConfirmations === lockTargetConfirmations;\n  useEffect(() => {\n    setTitle(confirmed ? \"Confirmed\" : \"Confirming\");\n  }, [setTitle, confirmed]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={lockCurrencyConfig.color || orangeLight}\n          confirmations={lockConfirmations}\n          targetConfirmations={lockTargetConfirmations}\n        >\n          <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <SmallWrapper>\n        <Typography variant=\"body1\" align=\"center\">\n          {lockConfirmations} of {lockTargetConfirmations} confirmations\n        </Typography>\n      </SmallWrapper>\n      <MediumWrapper>\n        <BigAssetAmount\n          value={\n            <NumberFormatText\n              value={lockTxAmount}\n              spacedSuffix={lockCurrencyConfig.short}\n            />\n          }\n        />\n      </MediumWrapper>\n      <TransactionDetailsButton\n        label={lockChainConfig.short}\n        address={lockTxHash}\n        link={lockTxLink}\n      />\n      <ProcessingTimeWrapper>\n        <Typography variant=\"caption\" component=\"p\" align=\"center\">\n          Estimated time remaining: {lockProcessingTime} minutes\n        </Typography>\n      </ProcessingTimeWrapper>\n    </>\n  );\n};\n\nconst maxConfirmations = (actual: number, target: number) => {\n  if (actual > target) {\n    return target;\n  }\n  return actual;\n};\n\ntype MintDepositAcceptedStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submitting: boolean;\n  submittingError: boolean;\n  depositHash: string;\n};\n\nexport const MintDepositAcceptedStatus: FunctionComponent<MintDepositAcceptedStatusProps> = ({\n  tx,\n  onSubmit = () => {},\n  onReload,\n  submitting,\n  submittingError,\n  depositHash,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  useSetActionRequired(true);\n  const theme = useTheme();\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    lockConfirmations,\n    lockTargetConfirmations,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  const notificationMessage = `${maxConfirmations(\n    lockConfirmations,\n    lockTargetConfirmations\n  )}/${lockTargetConfirmations} confirmations, ready to submit ${\n    lockCurrencyConfig.short\n  } to ${mintChainConfig.full}?`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(notificationMessage);\n    showBrowserNotification(notificationMessage);\n  });\n\n  const { MainIcon } = lockChainConfig;\n\n  return (\n    <>\n      <ProgressWrapper>\n        {submitting ? (\n          <ProgressWithContent color={theme.customColors.skyBlue} processing>\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        ) : (\n          <ProgressWithContent\n            color={lockCurrencyConfig.color || theme.customColors.skyBlue}\n            confirmations={lockConfirmations}\n            targetConfirmations={lockTargetConfirmations}\n          >\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          </ProgressWithContent>\n        )}\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />{\" \"}\n        Received\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={submittingError} onAction={onReload} />\n    </>\n  );\n};\n\ntype DestinationPendingStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  submitting: boolean;\n  depositHash: string;\n};\n\nexport const DestinationPendingStatus: FunctionComponent<DestinationPendingStatusProps> = ({\n  tx,\n  onSubmit = () => {},\n  submitting,\n  depositHash,\n}) => {\n  const theme = useTheme();\n  const {\n    lockCurrencyConfig,\n    lockChainConfig,\n    lockTxHash,\n    lockTxAmount,\n    lockTxLink,\n    mintTxHash,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent color={theme.customColors.skyBlue} processing>\n          <TransactionStatusInfo\n            status=\"Pending\"\n            chain={mintChainConfig.full}\n            address={mintTxHash}\n          />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        <NumberFormatText\n          value={lockTxAmount}\n          spacedSuffix={lockCurrencyConfig.full}\n        />\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={onSubmit} disabled={submitting}>\n          {submitting ? \"Submitting\" : \"Submit\"} to {mintChainConfig.full}\n          {submitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <ActionButtonWrapper>\n        <TransactionDetailsButton\n          label={lockChainConfig.short}\n          address={lockTxHash}\n          link={lockTxLink}\n        />\n      </ActionButtonWrapper>\n    </>\n  );\n};\n\ntype MintCompletedStatusProps = {\n  tx: GatewaySession;\n  depositHash: string;\n};\n\nexport const MintCompletedStatus: FunctionComponent<MintCompletedStatusProps> = ({\n  tx,\n  depositHash,\n}) => {\n  useSetPaperTitle(\"Complete\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    lockCurrencyConfig,\n    mintCurrencyConfig,\n    lockChainConfig,\n    lockTxLink,\n    lockTxAmount,\n    mintTxLink,\n    mintChainConfig,\n  } = getLockAndMintParams(tx, depositHash);\n  const { fees, pending } = useFetchFees(\n    lockCurrencyConfig.symbol,\n    TxType.MINT\n  );\n  const { conversionTotal } = getTransactionFees({\n    amount: lockTxAmount,\n    fees,\n    type: TxType.MINT,\n  });\n  const handleReturn = useCallback(() => {\n    history.push(paths.MINT);\n    dispatch(resetMint());\n  }, [dispatch, history]);\n\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n\n  const showNotifications = useCallback(() => {\n    if (!pending) {\n      const notificationMessage = `Successfully minted ${conversionTotal} ${mintCurrencyConfig.short} on ${mintChainConfig.full}.`;\n      showNotification(\n        <span>\n          {notificationMessage}{\" \"}\n          <Link external href={mintTxLink}>\n            View {mintChainConfig.full} transaction\n          </Link>\n        </span>\n      );\n      showBrowserNotification(notificationMessage);\n    }\n  }, [\n    showNotification,\n    showBrowserNotification,\n    pending,\n    conversionTotal,\n    mintChainConfig,\n    mintCurrencyConfig,\n    mintTxLink,\n  ]);\n\n  useEffect(showNotifications, [pending]);\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <Typography variant=\"body1\" align=\"center\" gutterBottom>\n        You received{\" \"}\n        <NumberFormatText\n          value={conversionTotal}\n          spacedSuffix={mintCurrencyConfig.short}\n        />\n        !\n      </Typography>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={lockTxLink}\n        >\n          {lockChainConfig.full} transaction\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={mintTxLink}\n        >\n          {mintChainConfig.full} transaction\n        </Link>\n      </Box>\n    </>\n  );\n};\n","import { ButtonBase, ButtonProps, makeStyles, styled } from \"@material-ui/core\";\nimport classNames from \"classnames\";\nimport React, { FunctionComponent } from \"react\";\nimport {\n  NavigatePrevIcon,\n  NavigateNextIcon,\n} from \"../../../components/icons/RenIcons\";\n\nconst useBigNavButtonStyles = makeStyles((theme) => ({\n  root: {\n    color: theme.palette.primary.main,\n    fontSize: 90,\n    transition: \"all 1s\",\n    display: \"inline-flex\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      color: theme.palette.primary.dark,\n    },\n  },\n  disabled: {\n    opacity: 0.2,\n    cursor: \"default\",\n  },\n  hidden: {\n    display: \"none\",\n    opacity: 0,\n  },\n}));\n\ntype BigNavButtonProps = ButtonProps & {\n  direction: \"next\" | \"prev\";\n};\nexport const BigNavButton: FunctionComponent<BigNavButtonProps> = ({\n  direction,\n  disabled,\n  hidden,\n  className,\n  onClick,\n}) => {\n  const styles = useBigNavButtonStyles();\n  const rootClassName = classNames(styles.root, className, {\n    [styles.disabled]: disabled,\n    [styles.hidden]: hidden,\n  });\n  const Icon = direction === \"prev\" ? NavigatePrevIcon : NavigateNextIcon;\n  return (\n    <ButtonBase className={rootClassName} disabled={disabled} onClick={onClick}>\n      <Icon fontSize=\"inherit\" />\n    </ButtonBase>\n  );\n};\n\nexport const BigPrevButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"prev\" {...props} />\n);\n\nexport const BigNextButton: FunctionComponent<ButtonProps> = (props) => (\n  <BigNavButton direction=\"next\" {...props} />\n);\n\nconst offsetTop = 38;\nconst offsetHorizontal = -42;\nexport const DepositPrevButton = styled(BigPrevButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  left: offsetHorizontal,\n});\n\nexport const DepositNextButton = styled(BigNextButton)({\n  position: \"absolute\",\n  top: offsetTop,\n  right: offsetHorizontal,\n});\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  DepositMachineSchema,\n  GatewayMachineContext,\n  GatewayMachineEvent,\n  GatewaySession,\n  mintMachine,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { lockChainMap, mintChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\nimport { depositSorter } from \"./mintUtils\";\n\nexport const useMintMachine = (mintTransaction: GatewaySession) => {\n  const tx = cloneTx(mintTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(mintMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: lockChainMap,\n      toChainMap: mintChainMap,\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  useMintTransactionPersistence(machineHook[2]);\n\n  return machineHook;\n};\n\nexport type DepositMachineSchemaState = keyof DepositMachineSchema[\"states\"];\n\nexport const useMintTransactionPersistence = (\n  service: Interpreter<GatewayMachineContext, any, GatewayMachineEvent>\n) => {\n  const dispatch = useDispatch();\n  const sub = useCallback(\n    async (state: State<GatewayMachineContext, GatewayMachineEvent, any>) => {\n      const tx = state.context.tx;\n      try {\n        // DEPOSIT_UPDATE should be a safe event to update the db on\n        if (\n          state.event.type === \"DEPOSIT_UPDATE\" &&\n          state.value === \"listening\"\n        ) {\n          // no more meta status -\n          // this would not have worked with multiple deposits anyhow\n          // Also clone prevents throwing serialization errors during dispatch\n          // which breaks the event loop and prevents txs from processing\n          const newDbTx = cloneTx(tx);\n          await db.updateTx(newDbTx);\n          dispatch(updateTransaction(newDbTx));\n        }\n      } catch (err) {\n        console.warn(\"Mint Tx synchronization failed\", err, tx);\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    service.subscribe(sub);\n    return () => {\n      service.off(sub);\n    };\n  }, [dispatch, service, sub]);\n\n  service.subscribe();\n};\n\nexport const useDepositPagination = (\n  tx: GatewaySession,\n  depositSourceHash = \"\"\n) => {\n  const sortedDeposits = Object.values(tx.transactions).sort(depositSorter);\n  const orderedHashes = sortedDeposits.map((deposit) => deposit.sourceTxHash);\n  const total = orderedHashes.length;\n  const initial = depositSourceHash || total > 0 ? orderedHashes[0] : \"\";\n  const [currentHash, setCurrentHash] = useState(initial);\n  useEffect(() => {\n    setCurrentHash(initial);\n  }, [initial]);\n\n  const currentIndex = orderedHashes.indexOf(currentHash);\n  const nextIndex =\n    total > 0 && currentIndex + 1 < total ? currentIndex + 1 : 0;\n  const nextHash = orderedHashes[nextIndex];\n  const prevIndex = total > 0 && currentIndex - 1 >= 0 ? currentIndex - 1 : 0;\n  const prevHash = orderedHashes[prevIndex];\n\n  const handleNext = useCallback(() => {\n    setCurrentHash(nextHash);\n  }, [nextHash]);\n  const handlePrev = useCallback(() => {\n    setCurrentHash(prevHash);\n  }, [prevHash]);\n  return {\n    currentHash,\n    currentIndex,\n    handleNext,\n    handlePrev,\n    total,\n  };\n};\n","import { Divider, IconButton } from \"@material-ui/core\";\nimport {\n  depositMachine,\n  DepositMachineSchema,\n  GatewaySession,\n  GatewayTransaction,\n} from \"@renproject/ren-tx\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router-dom\";\nimport { Actor } from \"xstate\";\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from \"../../../components/buttons/Buttons\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletConnectionProgress } from \"../../../components/wallet/WalletHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { usePageTitle, usePaperTitle } from \"../../../providers/TitleProviders\";\nimport {\n  getChainConfigByRentxName,\n  getCurrencyConfigByRentxName,\n} from \"../../../utils/assetConfigs\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { BrowserNotificationsDrawer } from \"../../notifications/components/NotificationsHelpers\";\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from \"../../notifications/notificationsUtils\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport { TransactionMenu } from \"../../transactions/components/TransactionMenu\";\nimport {\n  BookmarkPageWarning,\n  ExpiredErrorDialog,\n  ProgressStatus,\n  WrongAddressWarningDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from \"../../transactions/transactionsHooks\";\nimport {\n  createTxQueryString,\n  getAddressExplorerLink,\n  getTxPageTitle,\n  isTxExpired,\n  parseTxQueryString,\n  TxType,\n  useTxParam,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport {\n  DepositWrapper,\n  MultipleDepositsMessage,\n} from \"../components/MintHelpers\";\nimport {\n  DestinationPendingStatus,\n  MintCompletedStatus,\n  MintDepositAcceptedStatus,\n  MintDepositConfirmationStatus,\n  MintDepositToStatus,\n} from \"../components/MintStatuses\";\nimport {\n  DepositNextButton,\n  DepositPrevButton,\n} from \"../components/MultipleDepositsHelpers\";\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, getRemainingGatewayTime } from \"../mintUtils\";\n\nexport const MintProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const chain = useSelector($chain);\n  const { walletConnected } = useSelectedChainWallet();\n  const { tx: parsedTx, txState } = useTxParam();\n  const [reloading, setReloading] = useState(false);\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession);\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n\n  const {\n    menuOpened,\n    handleMenuOpen,\n    handleMenuClose,\n    handleDeleteTx,\n  } = useTransactionDeletion(tx);\n\n  const {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n  } = useBrowserNotificationsConfirmation();\n\n  const { enabled, handleEnable } = useBrowserNotifications(handleModalClose);\n\n  useEffect(() => {\n    if (txState?.reloadTx) {\n      setTx(parsedTx as GatewaySession);\n      setReloading(true);\n      history.replace({ ...location, state: undefined });\n      setTimeout(() => {\n        setReloading(false);\n      }, 1000);\n    }\n  }, [history, location, txState, parsedTx]);\n\n  const [activeAmount, setActiveAmount] = useState(Number(tx.targetAmount));\n  const handleActiveAmountChange = useCallback((newAmount: number) => {\n    setActiveAmount(newAmount);\n  }, []);\n\n  const destChain = parsedTx?.destChain;\n  useEffect(() => {\n    if (destChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(destChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, destChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const onBookmarkWarningClosed = useCallback(() => {\n    history.replace({ ...location, state: undefined });\n  }, [history, location]);\n\n  const showTransactionStatus = !!tx && walletConnected;\n  const feeCurrency = getCurrencyConfigByRentxName(tx.sourceAsset).symbol;\n\n  const handleRestart = useCallback(() => {\n    dispatch(\n      resetMint({\n        amount: activeAmount,\n        currency: feeCurrency,\n      })\n    );\n    history.push(paths.MINT);\n  }, [dispatch, activeAmount, feeCurrency, history]);\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          {txState?.newTx && (\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n          )}\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          <ToggleIconButton\n            pressed={enabled}\n            variant=\"notifications\"\n            onClick={handleModalOpen}\n          />\n          <ToggleIconButton\n            variant=\"settings\"\n            onClick={handleMenuOpen}\n            pressed={menuOpened}\n          />\n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {reloading && <ProgressStatus processing />}\n        {!reloading && showTransactionStatus && (\n          <MintTransactionStatus\n            tx={tx}\n            onRestart={handleRestart}\n            depositHash={parsedTx?.depositHash || \"\"}\n            onActiveAmountChange={handleActiveAmountChange}\n          />\n        )}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <TransactionFees\n              chain={chain}\n              amount={activeAmount}\n              currency={feeCurrency}\n              type={TxType.MINT}\n              address={tx.userAddress}\n            />\n          </PaperContent>\n        </>\n      )}\n      {txState?.newTx && (\n        <BookmarkPageWarning onClosed={onBookmarkWarningClosed} />\n      )}\n      <BrowserNotificationsDrawer\n        open={modalOpened}\n        onClose={handleModalClose}\n        onEnable={handleEnable}\n      />\n      <TransactionMenu\n        tx={tx}\n        open={menuOpened}\n        onClose={handleMenuClose}\n        onDeleteTx={handleDeleteTx}\n      />\n      <Debug it={{ parsedTx, txState: txState }} />\n    </>\n  );\n};\n\ntype MintTransactionStatusProps = {\n  tx: GatewaySession;\n  onRestart: () => void;\n  depositHash?: string;\n  onActiveAmountChange: (amount: number) => void;\n};\n\nconst MintTransactionStatus: FunctionComponent<MintTransactionStatusProps> = ({\n  tx,\n  depositHash = \"\",\n  onRestart,\n  onActiveAmountChange,\n}) => {\n  const [current, , service] = useMintMachine(tx);\n  const chain = useSelector($chain);\n  const renNetwork = useSelector($renNetwork);\n  const { account } = useSelectedChainWallet();\n  useEffect(\n    () => () => {\n      service.stop();\n    },\n    [service]\n  );\n\n  const {\n    currentIndex,\n    currentHash,\n    total,\n    handlePrev,\n    handleNext,\n  } = useDepositPagination(current.context.tx, depositHash);\n\n  const { showNotification, closeNotification } = useNotifications();\n  useEffect(() => {\n    let key = 0;\n    if (total > 1) {\n      key = showNotification(<MultipleDepositsMessage />, {\n        variant: \"warning\",\n        persist: true,\n      }) as number;\n    }\n    return () => {\n      if (key) {\n        closeNotification(key);\n      }\n    };\n  }, [showNotification, closeNotification, total]);\n\n  const [wrongAddressDialogOpened, setWrongAddressDialogOpened] = useState(\n    false\n  );\n  const handleCloseWrongAddressDialog = useCallback(() => {\n    setWrongAddressDialogOpened(false);\n  }, []);\n\n  useEffect(() => {\n    if (\n      account &&\n      current.context.tx.userAddress &&\n      account.toLowerCase() !== current.context.tx.userAddress.toLowerCase()\n    ) {\n      setWrongAddressDialogOpened(true);\n    } else {\n      setWrongAddressDialogOpened(false);\n    }\n  }, [account, current.context.tx.userAddress]);\n\n  const activeDeposit = useMemo<{\n    deposit: GatewayTransaction;\n    machine: Actor<typeof depositMachine>;\n  } | null>(() => {\n    if (!current.context.tx.transactions) {\n      return null;\n    }\n    const deposit = current.context.tx.transactions[currentHash];\n    if (!deposit || !current.context.depositMachines) return null;\n    const machine = current.context.depositMachines[deposit.sourceTxHash];\n    return { deposit, machine };\n  }, [currentHash, current.context]);\n\n  const currentAmount = activeDeposit?.deposit.sourceTxAmount;\n  useEffect(() => {\n    if (currentAmount) {\n      onActiveAmountChange(currentAmount / 10 ** 8);\n    }\n  }, [currentAmount, onActiveAmountChange]);\n\n  const [timeRemained] = useState(getRemainingGatewayTime(tx.expiryTime));\n\n  // In order to enable quick restoration, we need to persist the deposit transaction\n  // We persist via querystring, so lets check if the transaction is present\n  // and update otherwise\n  const location = useLocation();\n  const history = useHistory();\n\n  useEffect(() => {\n    if (!location.search) return;\n    const queryTx = parseTxQueryString(location.search);\n    const deposit = (queryTx?.transactions || {})[currentHash];\n    // If we have detected a deposit, but there is no deposit in the querystring\n    // update the queryString to have the deposit\n    // TODO: to enable quick resume, we may want to ask users to update their bookmarks\n    if (activeDeposit && !deposit) {\n      history.replace({\n        pathname: paths.MINT_TRANSACTION,\n        search: \"?\" + createTxQueryString(current.context.tx),\n      });\n    }\n  }, [currentHash, location, activeDeposit, current.context.tx, history]);\n\n  const { mintCurrencyConfig } = getLockAndMintParams(\n    current.context.tx,\n    currentHash\n  );\n  const accountExplorerLink = getAddressExplorerLink(\n    chain,\n    renNetwork,\n    account\n  );\n  return (\n    <>\n      {activeDeposit ? (\n        <DepositWrapper>\n          <MintTransactionDepositStatus\n            tx={current.context.tx}\n            deposit={activeDeposit.deposit}\n            machine={activeDeposit.machine}\n            depositHash={currentHash}\n          />\n          {total > 1 && (\n            <>\n              <DepositPrevButton\n                onClick={handlePrev}\n                disabled={currentIndex === 0}\n              />\n              <DepositNextButton\n                onClick={handleNext}\n                disabled={currentIndex === total - 1}\n              />\n            </>\n          )}\n        </DepositWrapper>\n      ) : (\n        <MintDepositToStatus tx={current.context.tx} />\n      )}\n      {\n        // We want to allow users to finish mints for deposits that have been detected\n        // If there are no deposits, and the gateway is expired (timeRemained < 0),\n        // show the expiry modal\n        (isTxExpired(current.context.tx) ||\n          (timeRemained <= 0 &&\n            Object.keys(current.context.tx.transactions).length === 0)) && (\n          <ExpiredErrorDialog open onAction={onRestart} />\n        )\n      }\n      <WrongAddressWarningDialog\n        open={wrongAddressDialogOpened}\n        address={account}\n        addressExplorerLink={accountExplorerLink}\n        currency={mintCurrencyConfig.short}\n        onAlternativeAction={handleCloseWrongAddressDialog}\n      />\n      <Debug\n        disable\n        it={{\n          depositHash,\n          // pagination: { currentIndex, currentHash, total },\n          // contextTx: current.context.tx,\n          // activeDeposit,\n          // total,\n          // currentIndex,\n          // currentHash,\n        }}\n      />\n    </>\n  );\n};\n\ntype MintTransactionDepositStatusProps = {\n  tx: GatewaySession;\n  deposit: GatewayTransaction;\n  machine: Actor<typeof depositMachine>;\n  depositHash: string;\n};\n\nexport const forceState = \"srcSettling\" as keyof DepositMachineSchema[\"states\"];\n\nexport const MintTransactionDepositStatus: FunctionComponent<MintTransactionDepositStatusProps> = ({\n  tx,\n  deposit,\n  machine,\n  depositHash,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const handleSubmitToDestinationChain = useCallback(() => {\n    machine.send({ type: \"CLAIM\" });\n  }, [machine]);\n\n  const handleReload = useCallback(() => {\n    history.replace({\n      ...location,\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n  }, [history, location]);\n\n  const state = machine?.state.value as keyof DepositMachineSchema[\"states\"];\n  if (!machine) {\n    // We should always have machines for transactions\n    return <ProgressStatus processing={false} reason=\"Restoring...\" />;\n  }\n  console.debug(tx.id, depositHash, state);\n  switch (state) {\n    case \"srcSettling\":\n      return (\n        <MintDepositConfirmationStatus tx={tx} depositHash={depositHash} />\n      );\n    case \"srcConfirmed\": // source sourceChain confirmations ok, but renVM still doesn't accept it\n      return <ProgressStatus reason=\"Submitting to RenVM\" />;\n    case \"errorAccepting\":\n    case \"errorSubmitting\":\n    case \"claiming\":\n    case \"accepted\": // RenVM accepted it, it can be submitted to ethereum\n      return (\n        <MintDepositAcceptedStatus\n          tx={tx}\n          onSubmit={handleSubmitToDestinationChain}\n          onReload={handleReload}\n          depositHash={depositHash}\n          submitting={state === \"claiming\"}\n          submittingError={\n            state === \"errorSubmitting\" || state === \"errorAccepting\"\n          }\n        />\n      );\n    case \"destInitiated\": // final txHash means its done or check if wallet balances went up\n      return (\n        <DestinationPendingStatus\n          tx={tx}\n          onSubmit={handleSubmitToDestinationChain}\n          depositHash={depositHash}\n          submitting={true}\n        />\n      );\n    case \"completed\":\n      if (deposit.destTxHash) {\n        return <MintCompletedStatus tx={tx} depositHash={depositHash} />;\n      } else {\n        // FIXME: actually an error case, this shouldn't happen in this state\n        return (\n          <DestinationPendingStatus\n            tx={tx}\n            onSubmit={handleSubmitToDestinationChain}\n            depositHash={depositHash}\n            submitting={true}\n          />\n        );\n      }\n    case \"restoringDeposit\":\n      return <ProgressStatus reason=\"Restoring deposit\" />;\n    default:\n      return <ProgressStatus reason={machine.state.value} />;\n  }\n};\n","import React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { RouteComponentProps } from \"react-router\";\nimport { Route } from \"react-router-dom\";\nimport { paths } from \"../../pages/routes\";\nimport { usePageTitle } from \"../../providers/TitleProviders\";\nimport { TransactionTypeTabs } from \"../transactions/components/TransactionTypeTabs\";\nimport { useSetCurrentTxId } from \"../transactions/transactionsHooks\";\nimport { TxConfigurationStep } from \"../transactions/transactionsUtils\";\nimport { MintFeesStep } from \"./steps/MintFeesStep\";\nimport { MintInitialStep } from \"./steps/MintInitialStep\";\nimport { MintProcessStep } from \"./steps/MintProcessStep\";\n\nconst MintConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n\n  // clear the current tx so that history starts processing again\n  useSetCurrentTxId(\"\");\n\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <MintInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <MintFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const MintFlow: FunctionComponent<RouteComponentProps> = ({ match }) => {\n  usePageTitle(\"Minting\");\n  return (\n    <>\n      <Route exact path={paths.MINT} component={MintConfiguration} />\n      <Route exact path={paths.MINT_TRANSACTION} component={MintProcessStep} />\n    </>\n  );\n};\n","export const releaseTooltips = {\n  releasing: \"The amount and asset you're releasing before fees are applied.\",\n  from: \"The blockchain you are releasing the asset from.\",\n  to: \"The wallet address you're receiving the assets to.\",\n};\n","import { Divider, IconButton, Typography } from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport { CenteredProgress } from \"../../../components/progress/ProgressHelpers\";\nimport {\n  AssetInfo,\n  BigAssetAmount,\n  BigAssetAmountWrapper,\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { db } from \"../../../services/database/database\";\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  toReleasedCurrency,\n} from \"../../../utils/assetConfigs\";\nimport { useFetchFees } from \"../../fees/feesHooks\";\nimport { getTransactionFees } from \"../../fees/feesUtils\";\nimport { $exchangeRates } from \"../../marketData/marketDataSlice\";\nimport { findExchangeRate, USD_SYMBOL } from \"../../marketData/marketDataUtils\";\nimport { $renNetwork } from \"../../network/networkSlice\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport {\n  addTransaction,\n  setCurrentTxId,\n} from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  LocationTxState,\n  TxConfigurationStepProps,\n  TxType,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport {\n  $multiwalletChain,\n  $wallet,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport { releaseTooltips } from \"../components/ReleaseHelpers\";\nimport { $release, $releaseUsdAmount } from \"../releaseSlice\";\nimport {\n  createReleaseTransaction,\n  preValidateReleaseTransaction,\n} from \"../releaseUtils\";\n\nexport const ReleaseFeesStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onPrev,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const { account, walletConnected } = useSelectedChainWallet();\n  const [releasingInitialized, setReleasingInitialized] = useState(false);\n  const { amount, currency, address } = useSelector($release);\n  const network = useSelector($renNetwork);\n  const {\n    chain,\n    signatures: { signature },\n  } = useSelector($wallet);\n  const renChain = useSelector($multiwalletChain);\n  const amountUsd = useSelector($releaseUsdAmount);\n  const rates = useSelector($exchangeRates);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n  const { conversionTotal } = getTransactionFees({\n    amount,\n    fees,\n    type: TxType.BURN,\n  });\n\n  const currencyConfig = getCurrencyConfig(currency);\n  const chainConfig = getChainConfig(chain);\n  const destinationCurrency = toReleasedCurrency(currency);\n  const destinationCurrencyUsdRate = findExchangeRate(\n    rates,\n    destinationCurrency,\n    USD_SYMBOL\n  );\n  const destinationAmountUsd = conversionTotal * destinationCurrencyUsdRate;\n  const destinationCurrencyConfig = getCurrencyConfig(destinationCurrency);\n  const { MainIcon } = destinationCurrencyConfig;\n  const tx = useMemo(\n    () =>\n      createReleaseTransaction({\n        amount: amount,\n        currency: currency,\n        destAddress: address,\n        userAddress: account,\n        sourceChain: renChain,\n        network: network,\n      }),\n    [amount, currency, address, account, renChain, network]\n  );\n  const canInitializeReleasing = preValidateReleaseTransaction(tx);\n\n  const handleConfirm = useCallback(() => {\n    setReleasingInitialized(true);\n    if (walletConnected) {\n      if (canInitializeReleasing) {\n        setReleasingInitialized(true);\n      } else {\n        setReleasingInitialized(false);\n      }\n    } else {\n      setReleasingInitialized(false);\n      dispatch(setWalletPickerOpened(true));\n    }\n  }, [dispatch, canInitializeReleasing, walletConnected]);\n\n  const onReleaseTxCreated = useCallback(\n    (tx) => {\n      const dbTx = { ...tx };\n      db.addTx(dbTx, account, signature).then(() => {\n        dispatch(setCurrentTxId(tx.id));\n        dispatch(addTransaction(tx));\n        history.push({\n          pathname: paths.RELEASE_TRANSACTION,\n          search: \"?\" + createTxQueryString(tx),\n          state: {\n            txState: { newTx: true },\n          } as LocationTxState,\n        });\n      });\n    },\n    [dispatch, history, account, signature]\n  );\n\n  useEffect(() => {\n    if (releasingInitialized) {\n      onReleaseTxCreated(tx);\n    }\n  }, [onReleaseTxCreated, releasingInitialized, tx]);\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          <IconButton onClick={onPrev}>\n            <BackArrowIcon />\n          </IconButton>\n        </PaperNav>\n        <PaperTitle>Fees & Confirm</PaperTitle>\n        <PaperActions />\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        <BigAssetAmountWrapper>\n          <BigAssetAmount\n            value={\n              <NumberFormatText\n                value={amount}\n                spacedSuffix={currencyConfig.short}\n              />\n            }\n          />\n        </BigAssetAmountWrapper>\n        <Typography variant=\"body1\" gutterBottom>\n          Details\n        </Typography>\n        <LabelWithValue\n          label=\"Releasing\"\n          labelTooltip={releaseTooltips.releasing}\n          value={\n            <NumberFormatText\n              value={amount}\n              spacedSuffix={currencyConfig.short}\n            />\n          }\n          valueEquivalent={\n            <NumberFormatText\n              value={amountUsd}\n              spacedSuffix=\"USD\"\n              decimalScale={2}\n              fixedDecimalScale\n            />\n          }\n        />\n        <LabelWithValue\n          label=\"From\"\n          labelTooltip={releaseTooltips.from}\n          value={chainConfig.full}\n        />\n        <LabelWithValue\n          label=\"To\"\n          labelTooltip={releaseTooltips.to}\n          value={<MiddleEllipsisText hoverable>{address}</MiddleEllipsisText>}\n        />\n        <SpacedDivider />\n        <Typography variant=\"body1\" gutterBottom>\n          Fees\n        </Typography>\n        <TransactionFees\n          chain={chain}\n          amount={amount}\n          currency={currency}\n          type={TxType.BURN}\n        />\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        {walletConnected &&\n          (pending ? (\n            <CenteredProgress />\n          ) : (\n            <AssetInfo\n              label=\"Receiving\"\n              value={\n                <NumberFormatText\n                  value={conversionTotal}\n                  spacedSuffix={destinationCurrencyConfig.short}\n                />\n              }\n              valueEquivalent={\n                <NumberFormatText\n                  prefix=\" = $\"\n                  value={destinationAmountUsd}\n                  spacedSuffix=\"USD\"\n                  decimalScale={2}\n                  fixedDecimalScale\n                />\n              }\n              Icon={<MainIcon fontSize=\"inherit\" />}\n            />\n          ))}\n        <ActionButtonWrapper>\n          <ActionButton onClick={handleConfirm} disabled={releasingInitialized}>\n            {!walletConnected\n              ? \"Connect Wallet\"\n              : releasingInitialized\n              ? \"Confirming...\"\n              : \"Confirm\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import {\n  OutlinedInputProps, styled,\n  TextField,\n  TextFieldProps,\n} from '@material-ui/core'\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent } from \"react\";\n\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    fontSize: 13,\n    // border: `1px solid ${theme.palette.primary.main}`,\n    // borderRadius: 20,\n    // padding: 18,\n  },\n  input: {\n    paddingTop: 10,\n    fontSize: 13,\n  },\n}));\n\nexport const AddressInput: FunctionComponent<TextFieldProps> = (props) => {\n  const { input, ...classes } = useStyles();\n  return (\n    <TextField\n      classes={classes}\n      variant=\"outlined\"\n      InputProps={\n        { notched: false, classes: { root: input } } as OutlinedInputProps\n      }\n      fullWidth\n      {...props}\n    />\n  );\n};\n\nexport const AddressInputWrapper = styled('div')({\n  marginTop: 50,\n  marginBottom: 25,\n})\n","import { Divider, Fade } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback, useMemo } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { ActionButton, ActionButtonWrapper, } from '../../../components/buttons/Buttons'\nimport { AssetDropdown, AssetDropdownWrapper, } from '../../../components/dropdowns/AssetDropdown'\nimport { NumberFormatText } from '../../../components/formatting/NumberFormatText'\nimport { AddressInput, AddressInputWrapper, } from '../../../components/inputs/AddressInput'\nimport { BigCurrencyInput, BigCurrencyInputWrapper, } from '../../../components/inputs/BigCurrencyInput'\nimport { PaperContent } from '../../../components/layout/Paper'\nimport { Link } from '../../../components/links/Links'\nimport { CenteredProgress } from '../../../components/progress/ProgressHelpers'\nimport { AssetInfo, LabelWithValue, } from '../../../components/typography/TypographyHelpers'\nimport { releaseChainClassMap } from '../../../services/rentx'\nimport {\n  getChainConfig,\n  getCurrencyConfig,\n  supportedBurnChains,\n  supportedReleaseCurrencies,\n  toReleasedCurrency,\n} from '../../../utils/assetConfigs'\nimport { useFetchFees } from '../../fees/feesHooks'\nimport { getTransactionFees } from '../../fees/feesUtils'\nimport { $renNetwork } from '../../network/networkSlice'\nimport { useRenNetworkTracker } from '../../transactions/transactionsHooks'\nimport { TxConfigurationStepProps, TxType, } from '../../transactions/transactionsUtils'\nimport { useSelectedChainWallet } from '../../wallet/walletHooks'\nimport { $wallet, setChain, setWalletPickerOpened, } from '../../wallet/walletSlice'\nimport { getAssetBalance, useFetchBalances } from '../../wallet/walletUtils'\nimport { $release, $releaseUsdAmount, setReleaseAddress, setReleaseAmount, setReleaseCurrency, } from '../releaseSlice'\n\nexport const ReleaseInitialStep: FunctionComponent<TxConfigurationStepProps> = ({\n  onNext,\n}) => {\n  const dispatch = useDispatch();\n  const { walletConnected } = useSelectedChainWallet();\n  const { chain, balances } = useSelector($wallet);\n  const network = useSelector($renNetwork);\n  const { currency, amount, address } = useSelector($release);\n  const balance = getAssetBalance(balances, currency);\n  useRenNetworkTracker(currency);\n  useFetchBalances(supportedReleaseCurrencies);\n  const { fees, pending } = useFetchFees(currency, TxType.BURN);\n  const { conversionTotal } = getTransactionFees({\n    amount,\n    type: TxType.BURN,\n    fees,\n  });\n\n  const usdAmount = useSelector($releaseUsdAmount);\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleCurrencyChange = useCallback(\n    (event) => {\n      dispatch(setReleaseCurrency(event.target.value));\n    },\n    [dispatch]\n  );\n  const handleAmountChange = useCallback(\n    (value) => {\n      dispatch(setReleaseAmount(value));\n    },\n    [dispatch]\n  );\n  const handleAddressChange = useCallback(\n    (event) => {\n      dispatch(setReleaseAddress(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const handleSetMaxBalance = useCallback(() => {\n    if (!!balance) {\n      dispatch(setReleaseAmount(balance));\n    }\n  }, [dispatch, balance]);\n\n  const targetCurrency = toReleasedCurrency(currency);\n  const currencyConfig = getCurrencyConfig(currency);\n  const releaseCurrencyConfig = getCurrencyConfig(targetCurrency);\n  const { MainIcon } = releaseCurrencyConfig;\n  const releaseChainConfig = getChainConfig(releaseCurrencyConfig.sourceChain);\n  const validateAddress = useMemo(() => {\n    const ChainClass = (releaseChainClassMap as any)[\n      releaseChainConfig.rentxName\n    ];\n    if (ChainClass) {\n      const chainInstance = ChainClass();\n      return (address: any) => {\n        return chainInstance.utils.addressIsValid(address, network);\n      };\n    }\n    return () => true;\n  }, [releaseChainConfig.rentxName, network]);\n\n  const isAddressValid = validateAddress(address);\n  const basicCondition =\n    amount && address && isAddressValid && amount > 0 && !pending;\n\n  const hasBalance = balance !== null && amount <= Number(balance);\n  let enabled;\n  if (walletConnected) {\n    enabled = basicCondition && hasBalance;\n  } else {\n    enabled = basicCondition;\n  }\n  const handleNextStep = useCallback(() => {\n    if (!walletConnected) {\n      dispatch(setWalletPickerOpened(true));\n    }\n    if (onNext && basicCondition && hasBalance) {\n      onNext();\n    }\n  }, [dispatch, onNext, walletConnected, basicCondition, hasBalance]);\n  return (\n    <>\n      <PaperContent>\n        <BigCurrencyInputWrapper>\n          <BigCurrencyInput\n            onChange={handleAmountChange}\n            symbol={currencyConfig.short}\n            usdValue={usdAmount}\n            value={amount}\n          />\n        </BigCurrencyInputWrapper>\n        <Fade in={walletConnected}>\n          <LabelWithValue\n            label={`${currencyConfig.short} Balance`}\n            value={\n              <>\n                {balance !== null && walletConnected && (\n                  <Link onClick={handleSetMaxBalance} color=\"primary\">\n                    {balance}\n                  </Link>\n                )}\n              </>\n            }\n          />\n        </Fade>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Chain\"\n            mode=\"chain\"\n            available={supportedBurnChains}\n            value={chain}\n            onChange={handleChainChange}\n          />\n        </AssetDropdownWrapper>\n        <AssetDropdownWrapper>\n          <AssetDropdown\n            label=\"Asset\"\n            mode=\"send\"\n            available={supportedReleaseCurrencies}\n            balances={balances}\n            value={currency}\n            onChange={handleCurrencyChange}\n          />\n        </AssetDropdownWrapper>\n        <AddressInputWrapper>\n          <AddressInput\n            error={!!address && !isAddressValid}\n            placeholder={`Enter a Destination ${releaseChainConfig.full} Address`}\n            label=\"Releasing to\"\n            onChange={handleAddressChange}\n            value={address}\n          />\n        </AddressInputWrapper>\n      </PaperContent>\n      <Divider />\n      <PaperContent darker topPadding bottomPadding>\n        {walletConnected &&\n          (pending ? (\n            <CenteredProgress />\n          ) : (\n            <AssetInfo\n              label=\"Receiving:\"\n              value={\n                <NumberFormatText\n                  value={conversionTotal}\n                  spacedSuffix={releaseCurrencyConfig.short}\n                />\n              }\n              Icon={<MainIcon fontSize=\"inherit\" />}\n            />\n          ))}\n        <ActionButtonWrapper>\n          <ActionButton\n            onClick={handleNextStep}\n            disabled={walletConnected ? !enabled : false}\n          >\n            {walletConnected ? \"Next\" : \"Connect Wallet\"}\n          </ActionButton>\n        </ActionButtonWrapper>\n      </PaperContent>\n    </>\n  );\n};\n","import { Box, Typography, useTheme } from \"@material-ui/core\";\nimport { GatewaySession } from \"@renproject/ren-tx\";\nimport React, { FunctionComponent, useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { useEffectOnce } from \"react-use\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../../components/buttons/Buttons\";\nimport { Link } from \"../../../components/links/Links\";\nimport {\n  BigDoneIcon,\n  ProgressWithContent,\n  ProgressWrapper,\n  TransactionStatusInfo,\n} from \"../../../components/progress/ProgressHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { paths } from \"../../../pages/routes\";\nimport { useNotifications } from \"../../../providers/Notifications\";\nimport { useSetPaperTitle } from \"../../../providers/TitleProviders\";\nimport { useBrowserNotifications } from \"../../notifications/notificationsUtils\";\nimport {\n  GeneralErrorDialog,\n  SubmitErrorDialog,\n} from \"../../transactions/components/TransactionsHelpers\";\nimport { resetRelease } from \"../releaseSlice\";\nimport { getBurnAndReleaseParams } from \"../releaseUtils\";\n\nexport const a = 1;\n\ntype ReleaseProgressStatusProps = {\n  tx: GatewaySession;\n  onSubmit?: () => void;\n  onReload?: () => void;\n  submittingError?: boolean;\n  generalError?: boolean;\n  submitting?: boolean;\n  pending?: boolean;\n};\n\nexport const ReleaseProgressStatus: FunctionComponent<ReleaseProgressStatusProps> = ({\n  tx,\n  onSubmit,\n  onReload,\n  submitting = false,\n  submittingError,\n  generalError,\n  pending = false,\n}) => {\n  useSetPaperTitle(\"Submit\");\n  const theme = useTheme();\n  const {\n    burnChainConfig,\n    releaseCurrencyConfig,\n    burnTxHash,\n    burnTxLink,\n  } = getBurnAndReleaseParams(tx);\n  const { MainIcon } = burnChainConfig;\n\n  const handleSubmit = useCallback(() => {\n    if (onSubmit) {\n      onSubmit();\n    }\n  }, [onSubmit]);\n\n  const buttonSubmitting = pending || submitting;\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent\n          color={theme.customColors.skyBlue}\n          processing={buttonSubmitting}\n        >\n          {pending ? (\n            <TransactionStatusInfo\n              status=\"Pending\"\n              chain={burnChainConfig.full}\n              address={\n                <Link\n                  color=\"primary\"\n                  underline=\"hover\"\n                  href={burnTxLink}\n                  target=\"_blank\"\n                >\n                  {burnTxHash}\n                </Link>\n              }\n            />\n          ) : (\n            <MainIcon fontSize=\"inherit\" color=\"inherit\" />\n          )}\n        </ProgressWithContent>\n      </ProgressWrapper>\n      {!pending && (\n        <Typography variant=\"body1\" align=\"center\" gutterBottom>\n          To receive your {releaseCurrencyConfig.short}, submit a release\n          transaction to {burnChainConfig.full} via your Web3 Wallet.\n        </Typography>\n      )}\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleSubmit} disabled={buttonSubmitting}>\n          {buttonSubmitting ? \"Submitting\" : \"Submit\"} to {burnChainConfig.full}\n          {buttonSubmitting && \"...\"}\n        </ActionButton>\n      </ActionButtonWrapper>\n      <SubmitErrorDialog open={Boolean(submittingError)} onAction={onReload} />\n      <GeneralErrorDialog open={Boolean(generalError)} onAction={onReload} />\n    </>\n  );\n};\n\ntype ReleaseCompletedStatusProps = {\n  tx: GatewaySession;\n  onReturn?: () => void;\n};\n\nexport const ReleaseCompletedStatus: FunctionComponent<ReleaseCompletedStatusProps> = ({\n  tx,\n}) => {\n  useSetPaperTitle(\"Completed\");\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const {\n    releaseChainConfig,\n    releaseCurrencyConfig,\n    burnChainConfig,\n    burnTxLink,\n    releaseTxLink,\n    releaseAddressLink,\n  } = getBurnAndReleaseParams(tx);\n  const handleReturn = useCallback(() => {\n    history.push(paths.RELEASE);\n    dispatch(resetRelease());\n  }, [dispatch, history]);\n\n  const notificationMessage = `Successfully released ${tx.targetAmount} ${releaseCurrencyConfig.short}`;\n  const { showNotification } = useNotifications();\n  const { showBrowserNotification } = useBrowserNotifications();\n  useEffectOnce(() => {\n    showNotification(\n      <span>\n        {notificationMessage}{\" \"}\n        <Link external href={releaseTxLink || releaseAddressLink}>\n          View {releaseChainConfig.full}{\" \"}\n          {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n      </span>\n    );\n    showBrowserNotification(notificationMessage);\n  });\n\n  return (\n    <>\n      <ProgressWrapper>\n        <ProgressWithContent>\n          <BigDoneIcon />\n        </ProgressWithContent>\n      </ProgressWrapper>\n      <ActionButtonWrapper>\n        <ActionButton onClick={handleReturn}>Back to start</ActionButton>\n      </ActionButtonWrapper>\n      <Box display=\"flex\" justifyContent=\"space-between\" flexWrap=\"wrap\" py={2}>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={releaseTxLink || releaseAddressLink}\n        >\n          {releaseChainConfig.full} {releaseTxLink ? \"transaction\" : \"address\"}\n        </Link>\n        <Link\n          external\n          color=\"primary\"\n          variant=\"button\"\n          underline=\"hover\"\n          href={burnTxLink}\n        >\n          {burnChainConfig.full} transaction\n        </Link>\n      </Box>\n      <Debug it={{ tx }} />\n    </>\n  );\n};\n","import { useMultiwallet } from \"@renproject/multiwallet-ui\";\nimport {\n  burnMachine,\n  BurnMachineContext,\n  BurnMachineEvent,\n  BurnMachineSchema,\n  GatewaySession,\n} from \"@renproject/ren-tx\";\nimport { useMachine } from \"@xstate/react\";\nimport { useCallback, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Interpreter, State } from \"xstate\";\nimport { env } from \"../../constants/environmentVariables\";\nimport { db } from \"../../services/database/database\";\nimport { getRenJs } from \"../../services/renJs\";\nimport { burnChainMap, releaseChainMap } from \"../../services/rentx\";\nimport { $renNetwork } from \"../network/networkSlice\";\nimport { updateTransaction } from \"../transactions/transactionsSlice\";\nimport { cloneTx } from \"../transactions/transactionsUtils\";\n\nexport const useBurnMachine = (burnTransaction: GatewaySession) => {\n  const tx = cloneTx(burnTransaction);\n  const { enabledChains } = useMultiwallet();\n  const network = useSelector($renNetwork);\n  const providers = Object.entries(enabledChains).reduce(\n    (c, n) => ({\n      ...c,\n      [n[0]]: n[1].provider,\n    }),\n    {}\n  );\n  const machineHook = useMachine(burnMachine, {\n    context: {\n      tx,\n      providers,\n      sdk: getRenJs(network),\n      fromChainMap: burnChainMap,\n      toChainMap: releaseChainMap,\n      // If we already have a transaction, we need to autoSubmit\n      // to check the tx status\n      autoSubmit: !!Object.values(burnTransaction.transactions)[0],\n    },\n    devTools: env.XSTATE_DEVTOOLS,\n  });\n\n  useReleaseTransactionPersistence(machineHook[2]);\n\n  return machineHook;\n};\n\nexport type BurnMachineSchemaState = keyof BurnMachineSchema[\"states\"];\n\nexport const useReleaseTransactionPersistence = (\n  service: Interpreter<BurnMachineContext, any, BurnMachineEvent>\n) => {\n  const dispatch = useDispatch();\n  const sub = useCallback(\n    async (state: State<BurnMachineContext, BurnMachineEvent>) => {\n      const tx = state.context.tx;\n      try {\n        const event = state.event.type;\n        // Persist more regularly to prevent the user from seeing confusing states\n        // and submitting multiple times\n        if ([\"CREATED\", \"SUBMITTED\", \"CONFIRMED\", \"RELEASED\"].includes(event)) {\n          // Clone prevents throwing serialization errors during dispatch\n          // which breaks the event loop and prevents txs from processing\n          const newDbTx = cloneTx(tx);\n          await db.updateTx(newDbTx);\n          dispatch(updateTransaction(newDbTx));\n        }\n      } catch (err) {\n        console.warn(\"Release Tx synchronization failed\", err, tx);\n      }\n    },\n    [dispatch]\n  );\n\n  useEffect(() => {\n    service.subscribe(sub);\n    return () => {\n      service.off(sub);\n    };\n  }, [dispatch, service, sub]);\n\n  service.subscribe();\n};\n","import { Divider, IconButton } from \"@material-ui/core\";\nimport { BurnMachineSchema, GatewaySession } from \"@renproject/ren-tx\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { RouteComponentProps, useHistory, useLocation } from \"react-router-dom\";\nimport {\n  ActionButton,\n  ToggleIconButton,\n} from \"../../../components/buttons/Buttons\";\nimport { NumberFormatText } from \"../../../components/formatting/NumberFormatText\";\nimport { BackArrowIcon } from \"../../../components/icons/RenIcons\";\nimport {\n  CenteringSpacedBox,\n  PaperSpacerWrapper,\n} from \"../../../components/layout/LayoutHelpers\";\nimport {\n  PaperActions,\n  PaperContent,\n  PaperHeader,\n  PaperNav,\n  PaperTitle,\n} from \"../../../components/layout/Paper\";\nimport {\n  LabelWithValue,\n  MiddleEllipsisText,\n  SpacedDivider,\n} from \"../../../components/typography/TypographyHelpers\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { WalletStatus } from \"../../../components/utils/types\";\nimport { WalletConnectionProgress } from \"../../../components/wallet/WalletHelpers\";\nimport { paths } from \"../../../pages/routes\";\nimport { usePageTitle, usePaperTitle } from \"../../../providers/TitleProviders\";\nimport { getChainConfigByRentxName } from \"../../../utils/assetConfigs\";\nimport { $exchangeRates } from \"../../marketData/marketDataSlice\";\nimport { findExchangeRate } from \"../../marketData/marketDataUtils\";\nimport { BrowserNotificationsDrawer } from \"../../notifications/components/NotificationsHelpers\";\nimport {\n  useBrowserNotifications,\n  useBrowserNotificationsConfirmation,\n} from \"../../notifications/notificationsUtils\";\nimport { TransactionFees } from \"../../transactions/components/TransactionFees\";\nimport { TransactionMenu } from \"../../transactions/components/TransactionMenu\";\nimport { ProgressStatus } from \"../../transactions/components/TransactionsHelpers\";\nimport {\n  useSetCurrentTxId,\n  useTransactionDeletion,\n} from \"../../transactions/transactionsHooks\";\nimport {\n  createTxQueryString,\n  getTxPageTitle,\n  TxType,\n  useTxParam,\n} from \"../../transactions/transactionsUtils\";\nimport {\n  useAuthRequired,\n  useSelectedChainWallet,\n} from \"../../wallet/walletHooks\";\nimport {\n  $chain,\n  setChain,\n  setWalletPickerOpened,\n} from \"../../wallet/walletSlice\";\nimport {\n  ReleaseCompletedStatus,\n  ReleaseProgressStatus,\n} from \"../components/ReleaseStatuses\";\nimport { useBurnMachine } from \"../releaseHooks\";\nimport { getBurnAndReleaseParams } from \"../releaseUtils\";\n\nexport const ReleaseProcessStep: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  useAuthRequired(true);\n  const dispatch = useDispatch();\n  const { status } = useSelectedChainWallet();\n  const walletConnected = status === WalletStatus.CONNECTED;\n  const chain = useSelector($chain);\n  const rates = useSelector($exchangeRates);\n  const [reloading, setReloading] = useState(false);\n  const { tx: parsedTx, txState } = useTxParam();\n  const [tx, setTx] = useState<GatewaySession>(parsedTx as GatewaySession); // TODO Partial<GatewaySession>\n  useSetCurrentTxId(tx.id);\n\n  usePageTitle(getTxPageTitle(tx));\n  const [paperTitle, setPaperTitle] = usePaperTitle();\n  useEffect(() => {\n    if (!walletConnected) {\n      setPaperTitle(\"Resume Transaction\");\n    }\n  }, [walletConnected, setPaperTitle]);\n\n  useEffect(() => {\n    if (txState?.reloadTx) {\n      setTx(parsedTx as GatewaySession);\n      setReloading(true);\n      history.replace({ ...location, state: undefined });\n      setTimeout(() => {\n        setReloading(false);\n      }, 1000);\n    }\n  }, [history, location, txState, parsedTx]);\n\n  const handlePreviousStepClick = useCallback(() => {\n    history.goBack();\n  }, [history]);\n  const sourceChain = parsedTx?.sourceChain;\n\n  const {\n    menuOpened,\n    handleMenuOpen,\n    handleMenuClose,\n    handleDeleteTx,\n  } = useTransactionDeletion(tx);\n\n  const {\n    modalOpened,\n    handleModalOpen,\n    handleModalClose,\n  } = useBrowserNotificationsConfirmation();\n\n  const { enabled, handleEnable } = useBrowserNotifications(handleModalClose);\n\n  useEffect(() => {\n    if (sourceChain) {\n      const bridgeChainConfig = getChainConfigByRentxName(sourceChain);\n      dispatch(setChain(bridgeChainConfig.symbol));\n    }\n  }, [dispatch, sourceChain]);\n\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const {\n    burnCurrencyConfig,\n    burnChainConfig,\n    releaseCurrencyConfig,\n  } = getBurnAndReleaseParams(tx);\n  const amount = Number(tx.targetAmount);\n  const releaseCurrencyUsdRate = findExchangeRate(\n    rates,\n    releaseCurrencyConfig.symbol\n  );\n  const amountUsd = amount * releaseCurrencyUsdRate;\n\n  return (\n    <>\n      <PaperHeader>\n        <PaperNav>\n          {txState?.newTx && (\n            <IconButton onClick={handlePreviousStepClick}>\n              <BackArrowIcon />\n            </IconButton>\n          )}\n        </PaperNav>\n        <PaperTitle>{paperTitle}</PaperTitle>\n        <PaperActions>\n          <ToggleIconButton\n            pressed={enabled}\n            variant=\"notifications\"\n            onClick={handleModalOpen}\n          />\n          <ToggleIconButton\n            variant=\"settings\"\n            onClick={handleMenuOpen}\n            pressed={menuOpened}\n          />\n        </PaperActions>\n      </PaperHeader>\n      <PaperContent bottomPadding>\n        {reloading && <ProgressStatus processing />}\n        {walletConnected && !reloading && <ReleaseTransactionStatus tx={tx} />}\n        {!walletConnected && (\n          <>\n            <PaperSpacerWrapper>\n              <CenteringSpacedBox>\n                <WalletConnectionProgress />\n              </CenteringSpacedBox>\n            </PaperSpacerWrapper>\n            <ActionButton onClick={handleWalletPickerOpen}>\n              Connect Wallet\n            </ActionButton>\n          </>\n        )}\n      </PaperContent>\n      {walletConnected && (\n        <>\n          <Divider />\n          <PaperContent darker topPadding bottomPadding>\n            <LabelWithValue\n              label=\"Releasing\"\n              value={\n                <NumberFormatText\n                  value={amount}\n                  spacedSuffix={burnCurrencyConfig.short}\n                />\n              }\n              valueEquivalent={\n                <NumberFormatText\n                  value={amountUsd}\n                  prefix=\"$\"\n                  decimalScale={2}\n                  fixedDecimalScale\n                />\n              }\n            />\n            <LabelWithValue label=\"From\" value={burnChainConfig.full} />\n            <LabelWithValue\n              label=\"To\"\n              value={\n                <MiddleEllipsisText hoverable>\n                  {tx.destAddress}\n                </MiddleEllipsisText>\n              }\n            />\n            <SpacedDivider />\n            <TransactionFees\n              chain={chain}\n              amount={amount}\n              currency={burnCurrencyConfig.symbol}\n              type={TxType.BURN}\n            />\n            <Debug it={{ parsedTx, txState: txState }} />\n          </PaperContent>\n        </>\n      )}\n      <BrowserNotificationsDrawer\n        open={modalOpened}\n        onClose={handleModalClose}\n        onEnable={handleEnable}\n      />\n      <TransactionMenu\n        tx={tx}\n        open={menuOpened}\n        onClose={handleMenuClose}\n        onDeleteTx={handleDeleteTx}\n      />\n      <Debug it={{ parsedTx, txState: txState }} />\n    </>\n  );\n};\n\ntype ReleaseTransactionStatusProps = {\n  tx: GatewaySession;\n};\n\nconst ReleaseTransactionStatus: FunctionComponent<ReleaseTransactionStatusProps> = ({\n  tx,\n}) => {\n  const history = useHistory();\n  const location = useLocation();\n  const [current, send, service] = useBurnMachine(tx);\n  useEffect(\n    () => () => {\n      console.info(\"stopping tx machine\");\n      service.stop();\n    },\n    [service]\n  );\n\n  const [submitting, setSubmitting] = useState(false);\n  const [timeoutError, setTimeoutError] = useState(false);\n  const handleSubmit = useCallback(() => {\n    setSubmitting(true);\n    send({ type: \"SUBMIT\" });\n    setTimeout(() => {\n      setTimeoutError(true);\n    }, 60000);\n  }, [send]);\n  const handleReload = useCallback(() => {\n    history.replace({\n      ...location,\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n  }, [history, location]);\n\n  useEffect(() => {\n    if (current.value === \"srcSettling\") {\n      history.replace({\n        pathname: paths.RELEASE_TRANSACTION,\n        search: \"?\" + createTxQueryString(current.context.tx),\n      });\n    }\n  }, [history, current.value, current.context.tx]);\n\n  // const forceState = \"errorReleasing\";\n  const state = current.value as keyof BurnMachineSchema[\"states\"];\n  console.debug(tx.id, state);\n  switch (state) {\n    // switch (forceState as keyof BurnMachineSchema[\"states\"]) {\n    case \"created\":\n      return (\n        <ReleaseProgressStatus\n          tx={tx}\n          onSubmit={handleSubmit}\n          submitting={submitting}\n          submittingError={timeoutError}\n          onReload={handleReload}\n        />\n      );\n    case \"errorBurning\":\n    case \"errorReleasing\":\n    case \"srcSettling\":\n      return (\n        <ReleaseProgressStatus\n          tx={current.context.tx}\n          pending\n          generalError={state !== \"srcSettling\"}\n          onReload={handleReload}\n        />\n      );\n    case \"srcConfirmed\":\n      return <ProgressStatus reason=\"Submitting to RenVM\" />;\n    case \"accepted\":\n      return <ProgressStatus reason=\"Releasing from RenVM\" />;\n    case \"destInitiated\":\n      return <ReleaseCompletedStatus tx={current.context.tx} />;\n    default:\n      return <ProgressStatus />;\n  }\n};\n","import React, { FunctionComponent, useCallback, useState } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { paths } from '../../pages/routes'\nimport { usePageTitle } from '../../providers/TitleProviders'\nimport { TransactionTypeTabs } from '../transactions/components/TransactionTypeTabs'\nimport { TxConfigurationStep } from '../transactions/transactionsUtils'\nimport { ReleaseFeesStep } from './steps/ReleaseFeesStep'\nimport { ReleaseInitialStep } from './steps/ReleaseInitialStep'\nimport { ReleaseProcessStep } from './steps/ReleaseProcessStep'\n\nconst ReleaseConfiguration: FunctionComponent<RouteComponentProps> = () => {\n  const [step, setStep] = useState(TxConfigurationStep.INITIAL);\n  const onInitialNext = useCallback(() => {\n    setStep(TxConfigurationStep.FEES);\n  }, []);\n  const onFeesPrev = useCallback(() => {\n    setStep(TxConfigurationStep.INITIAL);\n  }, []);\n\n  return (\n    <>\n      {step === TxConfigurationStep.INITIAL && (\n        <>\n          <TransactionTypeTabs />\n          <ReleaseInitialStep onNext={onInitialNext} />\n        </>\n      )}\n      {step === TxConfigurationStep.FEES && (\n        <ReleaseFeesStep onPrev={onFeesPrev} />\n      )}\n    </>\n  );\n};\n\nexport const ReleaseFlow: FunctionComponent = () => {\n  usePageTitle(\"Releasing\");\n  return (\n    <>\n      <Route exact path={paths.RELEASE} component={ReleaseConfiguration} />\n      <Route\n        exact\n        path={paths.RELEASE_TRANSACTION}\n        component={ReleaseProcessStep}\n      />\n    </>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport queryString from \"query-string\";\nimport { useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useLocation } from \"react-router-dom\";\nimport { setRenNetwork } from \"./networkSlice\";\n\nexport const supportedParamNetworks = [\n  RenNetwork.Mainnet,\n  RenNetwork.Testnet,\n  RenNetwork.TestnetVDot3,\n  RenNetwork.MainnetVDot3,\n];\n\nexport const useSetNetworkFromParam = () => {\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(location.search);\n\n  useEffect(() => {\n    const network = parsed.network as RenNetwork;\n    if (network) {\n      if (supportedParamNetworks.indexOf(network) > -1)\n        dispatch(setRenNetwork(parsed.network as RenNetwork));\n    }\n  }, [dispatch, parsed.network]);\n};\n","import {\n  Box,\n  TablePagination,\n  TablePaginationProps,\n  useTheme,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport FirstPageIcon from \"@material-ui/icons/FirstPage\";\nimport KeyboardArrowLeft from \"@material-ui/icons/KeyboardArrowLeft\";\nimport KeyboardArrowRight from \"@material-ui/icons/KeyboardArrowRight\";\nimport LastPageIcon from \"@material-ui/icons/LastPage\";\nimport React, { FunctionComponent } from \"react\";\nimport { NavigateNextIcon, NavigatePrevIcon } from \"../icons/RenIcons\";\n\nconst useSimplePaginationActionsStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n    marginLeft: theme.spacing(2.5),\n  },\n  button: {\n    color: theme.palette.common.black,\n  },\n}));\n\ntype TablePaginationActionsProps = {\n  count: number;\n  page: number;\n  rowsPerPage: number;\n  onChangePage: (\n    event: React.MouseEvent<HTMLButtonElement>,\n    newPage: number\n  ) => void;\n};\n\nfunction SimplePaginationActions(props: TablePaginationActionsProps) {\n  const styles = useSimplePaginationActionsStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleFirstPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, 0);\n  };\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page + 1);\n  };\n\n  const handleLastPageButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\n  };\n\n  return (\n    <div className={styles.root}>\n      <IconButton\n        className={styles.button}\n        onClick={handleFirstPageButtonClick}\n        disabled={page === 0}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleLastPageButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </div>\n  );\n}\n\nconst useSimplestPaginationActionsStyles = makeStyles((theme) => ({\n  root: {\n    flexShrink: 0,\n  },\n  button: {\n    padding: 1,\n    fontSize: 16,\n    marginTop: -3,\n    color: theme.palette.common.black,\n  },\n}));\n\nfunction SimplestPaginationActions(props: TablePaginationActionsProps) {\n  const styles = useSimplestPaginationActionsStyles();\n  const theme = useTheme();\n  const { count, page, rowsPerPage, onChangePage } = props;\n\n  const handleBackButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page - 1);\n  };\n\n  const handleNextButtonClick = (\n    event: React.MouseEvent<HTMLButtonElement>\n  ) => {\n    onChangePage(event, page + 1);\n  };\n\n  return (\n    <div className={styles.root}>\n      <IconButton\n        className={styles.button}\n        onClick={handleBackButtonClick}\n        disabled={page === 0}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <NavigateNextIcon fontSize=\"inherit\" />\n        ) : (\n          <NavigatePrevIcon fontSize=\"inherit\" />\n        )}\n      </IconButton>\n      <IconButton\n        className={styles.button}\n        onClick={handleNextButtonClick}\n        disabled={page >= Math.ceil(count / rowsPerPage) - 1}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <NavigatePrevIcon fontSize=\"inherit\" />\n        ) : (\n          <NavigateNextIcon fontSize=\"inherit\" />\n        )}\n      </IconButton>\n    </div>\n  );\n}\n\nconst useSimplePaginationStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    minHeight: 24,\n    paddingRight: 0,\n    paddingLeft: 0,\n    \"&:nth-child(2)\": {\n      display: \"none\",\n    },\n  },\n  spacer: {\n    display: \"none\",\n  },\n  caption: {\n    fontSize: 14,\n    marginRight: 2,\n  },\n}));\n\nexport const SimplePagination: FunctionComponent<TablePaginationProps> = (\n  props\n) => {\n  const classes = useSimplePaginationStyles();\n  return (\n    <TablePagination\n      component={Box}\n      classes={classes}\n      rowsPerPageOptions={[4]}\n      ActionsComponent={SimplePaginationActions}\n      {...props}\n    />\n  );\n};\n\nconst simplestDisplayedRows = ({\n  count,\n  page,\n}: {\n  count: number;\n  page: number;\n}) => `${page + 1} of ${count}`;\n\nconst useSimplestPaginationStyles = makeStyles((theme) => ({\n  toolbar: {\n    display: \"inline-flex\",\n    justifyContent: \"space-between\",\n    minHeight: 16,\n    paddingRight: 0,\n    paddingLeft: 0,\n    \"&:nth-child(2)\": {\n      display: \"none\",\n    },\n  },\n  spacer: {\n    display: \"none\",\n  },\n  caption: {\n    fontSize: 12,\n  },\n}));\n\nexport const SimplestPagination: FunctionComponent<TablePaginationProps> = ({\n  rowsPerPage,\n  ...props\n}) => {\n  const classes = useSimplestPaginationStyles();\n  return (\n    <TablePagination\n      component={Box}\n      classes={classes}\n      rowsPerPage={rowsPerPage}\n      rowsPerPageOptions={[rowsPerPage]}\n      labelRowsPerPage={<></>}\n      labelDisplayedRows={simplestDisplayedRows}\n      ActionsComponent={SimplestPaginationActions}\n      {...props}\n    />\n  );\n};\n\nconst useShowEntryStyles = makeStyles({\n  show: {},\n  hide: {\n    display: \"none\",\n  },\n});\n\ntype ShowEntryProps = {\n  when: boolean;\n};\n\nexport const ShowEntry: FunctionComponent<ShowEntryProps> = ({\n  when,\n  children,\n}) => {\n  const styles = useShowEntryStyles();\n  return <div className={when ? styles.show : styles.hide}>{children}</div>;\n};\n","import { Chip, styled, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport React, { FunctionComponent, useCallback, useState } from \"react\";\nimport { TxEntryStatus } from \"../../features/transactions/transactionsUtils\";\nimport { BridgeChain } from \"../../utils/assetConfigs\";\nimport { SmallActionButton } from \"../buttons/Buttons\";\nimport { Link } from \"../links/Links\";\nimport { SimplePagination } from \"../pagination/SimplePagination\";\nimport { TransactionStatusIndicator } from \"../progress/ProgressHelpers\";\nimport { TransactionStatusType } from \"../utils/types\";\n\ntype TransactionType = \"mint\" | \"release\";\n\nexport type Transaction = {\n  date: string;\n  time: string;\n  type: TransactionType;\n  status: TransactionStatusType;\n};\n\nconst standardPaddings = {\n  paddingLeft: 30,\n  paddingRight: 30,\n};\n\nconst useTransactionsHeaderStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 20,\n    background: theme.customColors.greyHeaderBackground,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  header: {},\n  actions: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n}));\n\nexport const TransactionsContent = styled(\"div\")(({ theme }) => ({\n  ...standardPaddings,\n}));\n\ntype TransactionsHeaderProps = {\n  title?: string;\n};\n\nexport const TransactionsHeader: FunctionComponent<TransactionsHeaderProps> = ({\n  title,\n  children,\n}) => {\n  const styles = useTransactionsHeaderStyles();\n  return (\n    <div className={styles.root}>\n      <Typography variant=\"h6\">{title}</Typography>\n      <div className={styles.actions}>{children}</div>\n    </div>\n  );\n};\n\nconst useTransactionsStatusHeaderStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 12,\n    paddingBottom: 6,\n    background: theme.customColors.greyHeaderBackground,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n  },\n  title: {\n    fontWeight: theme.typography.fontWeightBold,\n    lineHeight: 1.2,\n  },\n}));\n\nexport const TransactionsStatusHeader: FunctionComponent<TransactionsHeaderProps> = ({\n  title,\n}) => {\n  const styles = useTransactionsStatusHeaderStyles();\n  return (\n    <div className={styles.root}>\n      {title && (\n        <Typography variant=\"overline\" className={styles.title}>\n          {title}\n        </Typography>\n      )}\n    </div>\n  );\n};\n\nexport const TransactionsPaginationWrapper = styled(\"div\")(({ theme }) => ({\n  ...standardPaddings,\n  paddingTop: 10,\n  paddingBottom: 10,\n  backgroundColor: theme.customColors.greyHeaderBackground,\n}));\n\nexport const useTransactionEntryStyles = makeStyles((theme) => ({\n  root: {\n    ...standardPaddings,\n    paddingTop: 18,\n    paddingBottom: 18,\n    borderBottom: `1px solid ${theme.palette.divider}`,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n  },\n  details: {\n    alignSelf: \"flex-start\",\n  },\n  datetime: {},\n  date: {\n    marginRight: 6,\n  },\n  time: {\n    marginRight: 32,\n  },\n  multiple: {\n    display: \"inline-flex\",\n    marginRight: 6,\n  },\n  multipleLabel: {\n    marginRight: 16,\n  },\n  multiplePagination: {},\n  description: {\n    marginTop: 3,\n    marginBottom: 3,\n  },\n  title: {\n    fontSize: 15,\n  },\n  links: {},\n  expired: {\n    fontSize: 14,\n    display: \"inline-block\",\n    marginRight: 8,\n  },\n  link: {\n    fontSize: 14,\n    display: \"inline-block\",\n    marginRight: 24,\n    \"&:last-child\": {\n      marginRight: 0,\n    },\n  },\n  tooltipIcon: {\n    fontSize: 15,\n    marginBottom: -2,\n    marginRight: 2,\n  },\n  actions: {\n    flexGrow: 1,\n    paddingRight: 20,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  status: {},\n}));\n\ntype TransactionEntryProps = {\n  chain: BridgeChain;\n  status: TxEntryStatus;\n  confirmations?: number;\n};\n\nexport const TransactionEntry: FunctionComponent<TransactionEntryProps> = ({\n  confirmations,\n}) => {\n  const styles = useTransactionEntryStyles();\n  return (\n    <div className={styles.root}>\n      <div className={styles.details}>\n        <div className={styles.datetime}>\n          <Chip size=\"small\" label=\"04/02/20\" className={styles.date} />\n          <Chip size=\"small\" label=\"23:45:32 UTC\" />\n        </div>\n        <div className={styles.description}>\n          <Typography variant=\"body2\" className={styles.title}>\n            Mint 0.9877 renBTC on Ethereum\n          </Typography>\n        </div>\n        <div className={styles.links}>\n          <Link href=\"\" external color=\"primary\" className={styles.link}>\n            Bitcoin transaction\n          </Link>\n          <Link href=\"\" external color=\"primary\" className={styles.link}>\n            Ethereum transaction\n          </Link>\n        </div>\n      </div>\n      <div className={styles.actions}>\n        <SmallActionButton>Submit</SmallActionButton>\n      </div>\n      <div className={styles.status}>\n        <TransactionStatusIndicator confirmations={confirmations} />\n      </div>\n    </div>\n  );\n};\n\nexport const TransactionsGrid: FunctionComponent<any> = () => {\n  const pending = 3;\n  const completed = 2;\n\n  const [page, setPage] = useState(0);\n  const handleChangePage = useCallback((event: unknown, newPage: number) => {\n    setPage(newPage);\n  }, []);\n\n  const itemsCount = 15;\n  const itemsPerPage = 4;\n  return (\n    <div>\n      <TransactionsHeader title=\"Transactions\" />\n      <TransactionsStatusHeader title={`Pending (${pending})`} />\n      <div>\n        <TransactionEntry\n          chain={BridgeChain.BTCC}\n          status={TxEntryStatus.COMPLETED}\n          confirmations={2}\n        />\n        <TransactionEntry\n          chain={BridgeChain.BSCC}\n          status={TxEntryStatus.PENDING}\n        />\n      </div>\n      <TransactionsStatusHeader title={`Completed (${completed})`} />\n      <div>\n        <TransactionEntry\n          chain={BridgeChain.BTCC}\n          status={TxEntryStatus.COMPLETED}\n        />\n        <TransactionEntry\n          chain={BridgeChain.BSCC}\n          status={TxEntryStatus.COMPLETED}\n        />\n      </div>\n      <TransactionsPaginationWrapper>\n        <SimplePagination\n          count={itemsCount}\n          rowsPerPage={itemsPerPage}\n          page={page}\n          onChangePage={handleChangePage}\n        />\n      </TransactionsPaginationWrapper>\n    </div>\n  );\n};\n","import { Chip, styled, Tooltip, Typography } from \"@material-ui/core\";\nimport React, { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\";\nimport { SmallActionButton } from \"../../../components/buttons/Buttons\";\nimport {\n  CompletedIcon,\n  EmptyIcon,\n  TooltipIcon,\n} from \"../../../components/icons/RenIcons\";\nimport { Link } from \"../../../components/links/Links\";\nimport { SimplestPagination } from \"../../../components/pagination/SimplePagination\";\nimport { TransactionStatusIndicator } from \"../../../components/progress/ProgressHelpers\";\nimport { useTransactionEntryStyles } from \"../../../components/transactions/TransactionsGrid\";\nimport { Debug } from \"../../../components/utils/Debug\";\nimport { paths } from \"../../../pages/routes\";\nimport { getFormattedDateTime } from \"../../../utils/dates\";\nimport { TransactionItemProps } from \"../../transactions/components/TransactionsHelpers\";\nimport { setTxHistoryOpened } from \"../../transactions/transactionsSlice\";\nimport {\n  createTxQueryString,\n  isTransactionCompleted,\n  TxEntryStatus,\n  TxPhase,\n} from \"../../transactions/transactionsUtils\";\nimport { setChain } from \"../../wallet/walletSlice\";\nimport { useDepositPagination, useMintMachine } from \"../mintHooks\";\nimport { resetMint } from \"../mintSlice\";\nimport { getLockAndMintParams, isMintTransactionCompleted } from \"../mintUtils\";\n\nexport const MintTransactionEntryResolver: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const handleContinue = useCallback(() => {\n    history.push({\n      pathname: paths.MINT_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  if (isMintTransactionCompleted(tx) || isActive) {\n    return (\n      <MintTransactionEntry\n        tx={tx}\n        isActive={isActive}\n        onContinue={handleContinue}\n      />\n    );\n  }\n  return <MintTransactionEntryMachine tx={tx} />;\n};\n\nexport const MintTransactionEntryMachine: FunctionComponent<TransactionItemProps> = ({\n  tx,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [current, , service] = useMintMachine(tx);\n  useEffect(\n    () => () => {\n      service.stop();\n    },\n    [service]\n  );\n\n  // const deposit = Object.values(current.context.depositMachines || {})[0];\n  // all machines are automatically persisted\n  /* useMintTransactionPersistence(\n   *   current.context.tx,\n   *   (deposit?.state.value || \"\") as DepositMachineSchemaState\n   * );\n   */\n  const handleFinish = useCallback(() => {\n    history.push({\n      pathname: paths.MINT_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  return (\n    <MintTransactionEntry tx={current.context.tx} onContinue={handleFinish} />\n  );\n};\n\nconst WarningChip = styled(Chip)(({ theme }) => ({\n  color: theme.customColors.alertWarning,\n  backgroundColor: theme.customColors.alertWarningBackground,\n}));\n\nexport const MintTransactionEntry: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n  onContinue,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const styles = useTransactionEntryStyles();\n\n  const {\n    handleNext,\n    handlePrev,\n    currentIndex,\n    currentHash,\n    total,\n  } = useDepositPagination(tx);\n\n  const {\n    lockChainConfig,\n    lockConfirmations,\n    lockTargetConfirmations,\n    lockTxLink,\n    lockTxAmount,\n    mintCurrencyConfig,\n    mintChainConfig,\n    mintTxLink,\n    meta: { status, phase, createdTimestamp, transactionsCount },\n  } = getLockAndMintParams(tx, currentHash);\n\n  const handleRestart = useCallback(() => {\n    const {\n      lockCurrencyConfig,\n      mintChainConfig,\n      suggestedAmount,\n    } = getLockAndMintParams(tx, currentHash);\n    dispatch(setTxHistoryOpened(false));\n    dispatch(\n      resetMint({\n        currency: lockCurrencyConfig.symbol,\n        amount: suggestedAmount,\n      })\n    );\n    dispatch(setChain(mintChainConfig.symbol));\n    history.push({\n      pathname: paths.MINT,\n    });\n  }, [dispatch, history, tx, currentHash]);\n\n  const { date, time } = getFormattedDateTime(createdTimestamp);\n\n  let StatusIcon = EmptyIcon;\n  if (status === TxEntryStatus.COMPLETED) {\n    StatusIcon = CompletedIcon;\n  } else if (phase === TxPhase.LOCK) {\n    StatusIcon = lockChainConfig.Icon;\n  } else if (phase === TxPhase.MINT) {\n    StatusIcon = mintChainConfig.Icon;\n  }\n\n  const handlePageChange = useCallback(\n    (event: any, newPage: number) => {\n      newPage > currentIndex ? handleNext() : handlePrev();\n    },\n    [currentIndex, handleNext, handlePrev]\n  );\n\n  const handleContinue = useCallback(() => {\n    if (onContinue) {\n      onContinue(currentHash);\n    }\n  }, [currentHash, onContinue]);\n\n  const params = getLockAndMintParams(tx, currentHash);\n  return (\n    <>\n      <Debug\n        wrapper\n        it={{\n          currentHash,\n          currentIndex,\n          tx,\n          params,\n          completed: isTransactionCompleted(tx),\n        }}\n      />\n      <div className={styles.root}>\n        <div className={styles.details}>\n          <div className={styles.datetime}>\n            <Chip size=\"small\" label={date} className={styles.date} />\n            <Chip size=\"small\" label={time} className={styles.time} />\n            {transactionsCount > 1 && (\n              <div className={styles.multiple}>\n                <WarningChip\n                  size=\"small\"\n                  className={styles.multipleLabel}\n                  label=\"Multiple deposits\"\n                />\n                <SimplestPagination\n                  className={styles.multiplePagination}\n                  count={total}\n                  rowsPerPage={1}\n                  page={currentIndex}\n                  onChangePage={handlePageChange}\n                />\n              </div>\n            )}\n          </div>\n          <div className={styles.description}>\n            <Typography variant=\"body2\" className={styles.title}>\n              Mint {lockTxAmount || tx.targetAmount} {mintCurrencyConfig.short}{\" \"}\n              on {mintChainConfig.full}\n            </Typography>\n          </div>\n          <div className={styles.links}>\n            {lockTxLink && (\n              <Link\n                href={lockTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {lockChainConfig.full} transaction\n              </Link>\n            )}\n            {status === TxEntryStatus.EXPIRED && (\n              <>\n                <Typography\n                  variant=\"body2\"\n                  color=\"textSecondary\"\n                  display=\"inline\"\n                  className={styles.expired}\n                >\n                  <Tooltip title=\"This Gateway Address has expired. Gateway Addresses are only valid for 24 hours. If you have sent funds to this Gateway Address but have not submitted them to the destination chain then they are lost forever.\">\n                    <span>\n                      <TooltipIcon\n                        fontSize=\"inherit\"\n                        color=\"inherit\"\n                        className={styles.tooltipIcon}\n                      />\n                    </span>\n                  </Tooltip>\n                  Expired\n                </Typography>\n                <Link\n                  color=\"primary\"\n                  underline=\"hover\"\n                  className={styles.link}\n                  onClick={handleRestart}\n                >\n                  Restart transaction\n                </Link>\n              </>\n            )}\n            {mintTxLink && (\n              <Link\n                href={mintTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {mintChainConfig.full} transaction\n              </Link>\n            )}\n          </div>\n        </div>\n        <div className={styles.actions}>\n          {isActive && (\n            <Typography color=\"primary\" variant=\"body2\">\n              Currently viewing\n            </Typography>\n          )}\n          {!isActive && status === TxEntryStatus.ACTION_REQUIRED && (\n            <SmallActionButton onClick={handleContinue}>\n              {phase === TxPhase.LOCK ? \"Continue\" : \"Finish\"} mint\n            </SmallActionButton>\n          )}\n          {!isActive &&\n            status === TxEntryStatus.PENDING &&\n            lockConfirmations < lockTargetConfirmations && (\n              <Typography color=\"primary\" variant=\"body2\">\n                {lockConfirmations}/{lockTargetConfirmations} Confirmations\n              </Typography>\n            )}\n        </div>\n        <div className={styles.status}>\n          <TransactionStatusIndicator\n            needsAction={status === TxEntryStatus.ACTION_REQUIRED}\n            Icon={StatusIcon}\n            showConfirmations={phase === TxPhase.LOCK}\n            confirmations={lockConfirmations}\n            targetConfirmations={lockTargetConfirmations}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Chip, Typography } from '@material-ui/core'\nimport React, { FunctionComponent, useCallback, useEffect } from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\nimport { SmallActionButton } from '../../../components/buttons/Buttons'\nimport { CompletedIcon, EmptyIcon } from '../../../components/icons/RenIcons'\nimport { Link } from '../../../components/links/Links'\nimport { TransactionStatusIndicator } from '../../../components/progress/ProgressHelpers'\nimport { useTransactionEntryStyles } from '../../../components/transactions/TransactionsGrid'\nimport { Debug } from '../../../components/utils/Debug'\nimport { paths } from '../../../pages/routes'\nimport { getFormattedDateTime } from '../../../utils/dates'\nimport { TransactionItemProps } from '../../transactions/components/TransactionsHelpers'\nimport { setTxHistoryOpened } from '../../transactions/transactionsSlice'\nimport {\n  createTxQueryString,\n  isTransactionCompleted,\n  TxEntryStatus,\n  TxPhase,\n} from '../../transactions/transactionsUtils'\nimport { useBurnMachine, } from '../releaseHooks'\nimport { getBurnAndReleaseParams, isReleaseTransactionCompleted, } from '../releaseUtils'\n\nexport const ReleaseTransactionEntryResolver: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  isActive,\n}) => {\n  if (isReleaseTransactionCompleted(tx) || isActive) {\n    return <ReleaseTransactionEntry tx={tx} isActive={isActive} />;\n  }\n  return <ReleaseTransactionEntryMachine tx={tx} />;\n};\n\nexport const ReleaseTransactionEntryMachine: FunctionComponent<TransactionItemProps> = ({\n  tx,\n}) => {\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const [current, , service] = useBurnMachine(tx);\n  useEffect(\n    () => () => {\n      service.stop();\n    },\n    [service]\n  );\n\n  const handleFinish = useCallback(() => {\n    history.push({\n      pathname: paths.RELEASE_TRANSACTION,\n      search: \"?\" + createTxQueryString(tx),\n      state: {\n        txState: {\n          reloadTx: true,\n        },\n      },\n    });\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch, history, tx]);\n\n  return (\n    <ReleaseTransactionEntry\n      tx={current.context.tx}\n      onContinue={handleFinish}\n    />\n  );\n};\n\nexport const ReleaseTransactionEntry: FunctionComponent<TransactionItemProps> = ({\n  tx,\n  onContinue,\n  isActive,\n}) => {\n  const styles = useTransactionEntryStyles();\n  const {\n    burnChainConfig,\n    burnTxLink,\n    releaseCurrencyConfig,\n    releaseChainConfig,\n    releaseAddressLink,\n    meta: { status, phase, createdTimestamp },\n  } = getBurnAndReleaseParams(tx);\n\n  const { date, time } = getFormattedDateTime(createdTimestamp);\n\n  let StatusIcon = EmptyIcon;\n  if (status === TxEntryStatus.COMPLETED) {\n    StatusIcon = CompletedIcon;\n  } else if (phase === TxPhase.BURN) {\n    StatusIcon = burnChainConfig.Icon;\n  }\n\n  const handleContinue = useCallback(() => {\n    if (onContinue) {\n      onContinue();\n    }\n  }, [onContinue]);\n\n  const params = getBurnAndReleaseParams(tx);\n  return (\n    <>\n      <Debug\n        wrapper\n        it={{ tx, params, completed: isTransactionCompleted(tx) }}\n      />\n      <Debug disable it={{ meta: params.meta }} />\n      <div className={styles.root}>\n        <div className={styles.details}>\n          <div className={styles.datetime}>\n            <Chip size=\"small\" label={date} className={styles.date} />\n            <Chip size=\"small\" label={time} />\n          </div>\n          <div className={styles.description}>\n            <Typography variant=\"body2\" className={styles.title}>\n              Release {tx.targetAmount} {releaseCurrencyConfig.short} to{\" \"}\n              {releaseChainConfig.full}\n            </Typography>\n          </div>\n          <div className={styles.links}>\n            {status === TxEntryStatus.EXPIRED && phase === TxPhase.BURN && (\n              <Typography variant=\"body2\" color=\"error\" className={styles.link}>\n                Transaction expired\n              </Typography>\n            )}\n            {burnTxLink && (\n              <Link\n                href={burnTxLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {burnChainConfig.full} transaction\n              </Link>\n            )}\n            {releaseAddressLink && (\n              <Link\n                href={releaseAddressLink}\n                external\n                color=\"primary\"\n                underline=\"hover\"\n                className={styles.link}\n              >\n                {releaseChainConfig.full} address\n              </Link>\n            )}\n          </div>\n        </div>\n        <div className={styles.actions}>\n          {isActive && (\n            <Typography color=\"primary\" variant=\"body2\">\n              Currently viewing\n            </Typography>\n          )}\n          {!isActive && status === TxEntryStatus.ACTION_REQUIRED && (\n            <SmallActionButton onClick={handleContinue}>\n              Finish release\n            </SmallActionButton>\n          )}\n        </div>\n        <div className={styles.status}>\n          <TransactionStatusIndicator\n            needsAction={status === TxEntryStatus.ACTION_REQUIRED}\n            Icon={StatusIcon}\n            showConfirmations={phase === TxPhase.BURN}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n","import { Dialog, makeStyles } from \"@material-ui/core\";\nimport { DialogProps } from \"@material-ui/core/Dialog/Dialog\";\nimport React, { FunctionComponent } from \"react\";\n\nconst useTransactionHistoryDialogStyles = makeStyles({\n  paper: {\n    marginTop: 0, // 82,\n  },\n  container: {\n    paddingTop: 68\n  }\n});\n\nexport const TransactionHistoryDialog: FunctionComponent<DialogProps> = (\n  props\n) => {\n  const classes = useTransactionHistoryDialogStyles();\n  return <Dialog maxWidth=\"sm\" fullWidth classes={classes} {...props} />;\n};\n","import { Box, Typography } from \"@material-ui/core\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ActionButton,\n  ActionButtonWrapper,\n} from \"../../components/buttons/Buttons\";\nimport { AssetDropdown } from \"../../components/dropdowns/AssetDropdown\";\nimport {\n  BigTopWrapper,\n  BigWrapper,\n  CenteringSpacedBox,\n  MediumWrapper,\n  PaperSpacerWrapper,\n} from \"../../components/layout/LayoutHelpers\";\nimport {\n  ShowEntry,\n  SimplePagination,\n} from \"../../components/pagination/SimplePagination\";\nimport { CenteredProgress } from \"../../components/progress/ProgressHelpers\";\nimport {\n  TransactionsContent,\n  TransactionsHeader,\n  TransactionsPaginationWrapper,\n  TransactionsStatusHeader,\n} from \"../../components/transactions/TransactionsGrid\";\nimport { WalletConnectionProgress } from \"../../components/wallet/WalletHelpers\";\nimport { db } from \"../../services/database/database\";\nimport {\n  bridgeChainToRenChain,\n  getChainConfig,\n  supportedMintDestinationChains,\n} from \"../../utils/assetConfigs\";\nimport { isFirstVowel } from \"../../utils/strings\";\nimport { MintTransactionEntryResolver } from \"../mint/components/MintHistoryHelpers\";\nimport { ReleaseTransactionEntryResolver } from \"../release/components/ReleaseHistoryHelpers\";\nimport {\n  useAuthentication,\n  useSelectedChainWallet,\n} from \"../wallet/walletHooks\";\nimport {\n  $wallet,\n  setChain,\n  setWalletPickerOpened,\n} from \"../wallet/walletSlice\";\nimport { TransactionHistoryDialog } from \"./components/TransactionHistoryHelpers\";\nimport {\n  $currentTxId,\n  $orderedTransactions,\n  $transactionsData,\n  $txHistoryOpened,\n  BridgeTransaction,\n  setTransactions,\n  setTxHistoryOpened,\n  setTxsPending,\n} from \"./transactionsSlice\";\nimport { isTransactionCompleted, TxType } from \"./transactionsUtils\";\n\nexport const TransactionHistory: FunctionComponent = () => {\n  const dispatch = useDispatch();\n  const { account, walletConnected } = useSelectedChainWallet();\n  const { isAuthenticated } = useAuthentication();\n  const { chain, user } = useSelector($wallet);\n  const allTransactions = useSelector($orderedTransactions);\n  const { txsPending } = useSelector($transactionsData);\n  const opened = useSelector($txHistoryOpened);\n  const activeTxId = useSelector($currentTxId);\n\n  useEffect(() => {\n    if (!walletConnected) {\n      return;\n    }\n    if (!isAuthenticated) {\n      dispatch(setTxsPending(true));\n    }\n    if (isAuthenticated) {\n      db.getTxs(account)\n        .then((txsData) => {\n          // Only load txs for the correct chain, in case the address is valid on multiple chains\n          // (this will happen when using metamask for both bsc and eth)\n          dispatch(\n            setTransactions(\n              (txsData as Array<BridgeTransaction>).filter(\n                (x) =>\n                  // FIXME: remove the split between \"BridgeChain\" and \"RenChain\"\n                  x.sourceChain === bridgeChainToRenChain(chain) ||\n                  x.destChain === bridgeChainToRenChain(chain)\n              )\n            )\n          );\n          dispatch(setTxsPending(false));\n        })\n        .catch(console.error);\n    }\n  }, [dispatch, walletConnected, isAuthenticated, user, account, chain]);\n\n  const chainConfig = getChainConfig(chain);\n  const handleWalletPickerOpen = useCallback(() => {\n    dispatch(setWalletPickerOpened(true));\n  }, [dispatch]);\n\n  const handleChainChange = useCallback(\n    (event) => {\n      dispatch(setChain(event.target.value));\n    },\n    [dispatch]\n  );\n\n  const handleClose = useCallback(() => {\n    dispatch(setTxHistoryOpened(false));\n  }, [dispatch]);\n\n  const all = allTransactions.length;\n\n  const [page, setPage] = useState(0);\n  const handleChangePage = useCallback((event: unknown, newPage: number) => {\n    setPage(newPage);\n  }, []);\n\n  const itemsCount = all;\n  const itemsPerPage = 4;\n\n  const showTransactions = walletConnected && !txsPending;\n\n  const { pendingTxsCount, completedTxsCount } = useMemo(() => {\n    const pendingTxsCount = allTransactions.filter(\n      (tx) => !isTransactionCompleted(tx)\n    ).length;\n    const completedTxsCount = allTransactions.filter((tx) =>\n      isTransactionCompleted(tx)\n    ).length;\n    return { pendingTxsCount, completedTxsCount };\n  }, [allTransactions]);\n\n  return (\n    <TransactionHistoryDialog\n      open={opened}\n      onBackdropClick={handleClose}\n      keepMounted\n    >\n      <TransactionsHeader title=\"Transactions\">\n        <Box mr={1}>\n          <Typography variant=\"subtitle2\">Viewing: </Typography>\n        </Box>\n        <AssetDropdown\n          mode=\"chain\"\n          condensed\n          available={supportedMintDestinationChains}\n          value={chain}\n          onChange={handleChainChange}\n        />\n      </TransactionsHeader>\n      {(!walletConnected || txsPending) && (\n        <>\n          <TransactionsStatusHeader />\n          <TransactionsContent>\n            <BigTopWrapper>\n              {!walletConnected && (\n                <>\n                  <MediumWrapper>\n                    <Typography variant=\"body1\" align=\"center\">\n                      Please connect{\" \"}\n                      {isFirstVowel(chainConfig.full) ? \"an\" : \"a\"}{\" \"}\n                      {chainConfig.full} compatible wallet to view transactions\n                    </Typography>\n                  </MediumWrapper>\n                  <BigWrapper>\n                    <MediumWrapper>\n                      <CenteringSpacedBox>\n                        <WalletConnectionProgress />\n                      </CenteringSpacedBox>\n                    </MediumWrapper>\n                    <ActionButtonWrapper>\n                      <ActionButton onClick={handleWalletPickerOpen}>\n                        Connect Wallet\n                      </ActionButton>\n                    </ActionButtonWrapper>\n                  </BigWrapper>\n                </>\n              )}\n              {txsPending && (\n                <BigWrapper>\n                  <CenteredProgress color=\"primary\" size={100} />\n                </BigWrapper>\n              )}\n            </BigTopWrapper>\n          </TransactionsContent>\n        </>\n      )}\n      {showTransactions && (\n        <>\n          <div>\n            {allTransactions.map((tx, index) => {\n              const startIndex = page * itemsPerPage;\n              const endIndex = startIndex + itemsPerPage;\n              const indexIsInCurrentPage =\n                index >= startIndex && index < endIndex;\n\n              const isFirstShown = index === startIndex;\n              const isPreviousDifferent =\n                index > 0 &&\n                isTransactionCompleted(tx) &&\n                !isTransactionCompleted(allTransactions[index - 1]);\n              const showHeader = isFirstShown || isPreviousDifferent;\n              const isCurrentCompleted = isTransactionCompleted(tx);\n              const title = isCurrentCompleted\n                ? `Completed (${completedTxsCount})`\n                : `Pending (${pendingTxsCount})`;\n\n              const Header = <TransactionsStatusHeader title={title} />;\n\n              if (tx.type === TxType.MINT) {\n                return (\n                  <ShowEntry when={indexIsInCurrentPage} key={tx.id}>\n                    {showHeader && Header}\n                    <MintTransactionEntryResolver\n                      tx={tx}\n                      isActive={activeTxId === tx.id}\n                    />\n                  </ShowEntry>\n                );\n              } else {\n                return (\n                  <ShowEntry when={indexIsInCurrentPage} key={tx.id}>\n                    {showHeader && Header}\n                    <ReleaseTransactionEntryResolver\n                      tx={tx}\n                      isActive={activeTxId === tx.id}\n                    />\n                  </ShowEntry>\n                );\n              }\n            })}\n          </div>\n          {allTransactions.length === 0 && (\n            <PaperSpacerWrapper>\n              <Typography variant=\"body2\" align=\"center\" color=\"textSecondary\">\n                You have no transactions with this account.\n              </Typography>\n            </PaperSpacerWrapper>\n          )}\n          <TransactionsPaginationWrapper>\n            <SimplePagination\n              count={itemsCount}\n              rowsPerPage={itemsPerPage}\n              page={page}\n              onChangePage={handleChangePage}\n            />\n          </TransactionsPaginationWrapper>\n        </>\n      )}\n    </TransactionHistoryDialog>\n  );\n};\n","import { RenNetwork } from \"@renproject/interfaces\";\nimport { BinanceSmartChainInjectedConnector } from \"@renproject/multiwallet-binancesmartchain-injected-connector\";\nimport { EthereumInjectedConnector } from \"@renproject/multiwallet-ethereum-injected-connector\";\nimport { MultiwalletProvider as RenMultiwalletProvider } from \"@renproject/multiwallet-ui\";\nimport React, { FunctionComponent } from \"react\";\nimport { RenChain } from \"../../utils/assetConfigs\";\n\nconst networkMapping: Record<number, RenNetwork> = {\n  1: RenNetwork.Mainnet,\n  4: RenNetwork.TestnetVDot3,\n  42: RenNetwork.Testnet,\n};\n\nexport const ethNetworkToRenNetwork = (id: string | number): RenNetwork => {\n  const index = Number(id);\n  return networkMapping[index];\n};\n\nexport const walletPickerModalConfig = {\n  chains: {\n    [RenChain.ethereum]: [\n      {\n        name: \"Metamask\",\n        logo: \"https://avatars1.githubusercontent.com/u/11744586?s=60&v=4s\",\n        connector: new EthereumInjectedConnector({\n          debug: true,\n          networkIdMapper: ethNetworkToRenNetwork,\n        }),\n      }, //,\n      // {\n      //   name: \"WalletConnect\",\n      //   logo: \"https://avatars0.githubusercontent.com/u/37784886?s=60&v=4\",\n      //   connector: new EthereumWalletConnectConnector({\n      //     rpc: {\n      //       42: `https://kovan.infura.io/v3/${env.INFURA_KEY}`,\n      //     },\n      //     qrcode: true,\n      //     debug: true,\n      //   }),\n      // },\n    ],\n    [RenChain.binanceSmartChain]: [\n      // FIXME: this will load Metamask if BSC Wallet is not installed\n      // is this behavior what we want?\n      {\n        name: \"BinanceSmartWallet\",\n        logo: \"https://avatars2.githubusercontent.com/u/45615063?s=60&v=4\",\n        connector: new BinanceSmartChainInjectedConnector({ debug: true }),\n      },\n      // TODO: move this config into its own connector?\n      // {\n      //   name: \"Metamask\",\n      //   logo: \"https://avatars2.githubusercontent.com/u/45615063?s=60&v=4\",\n      //   info: ({ acknowledge, onClose }: any) => (\n      //     <>\n      //       <SpacedPaperContent topPadding>\n      //         <Typography variant=\"h5\" align=\"center\" gutterBottom>\n      //           Please ensure that you have added the BSC network to Metamask as\n      //           explained{\" \"}\n      //           <a href=\"https://academy.binance.com/en/articles/connecting-metamask-to-binance-smart-chain\">\n      //             here\n      //           </a>\n      //         </Typography>\n      //       </SpacedPaperContent>\n      //       <PaperContent>\n      //         <ActionButtonWrapper>\n      //           <ActionButton onClick={acknowledge}>Ok</ActionButton>\n      //           <ActionButton onClick={onClose}>Cancel</ActionButton>\n      //         </ActionButtonWrapper>\n      //       </PaperContent>\n      //     </>\n      //   ),\n      //   connector: (() => {\n      //     const connector = new BinanceSmartChainInjectedConnector({\n      //       debug: true,\n      //     });\n      //     connector.getProvider = () => (window as any).ethereum;\n      //     return connector;\n      //   })(),\n      // },\n    ],\n  },\n};\n\nexport const MultiwalletProvider: FunctionComponent = ({ children }) => {\n  return <RenMultiwalletProvider>{children}</RenMultiwalletProvider>;\n};\n","import {\n  Button,\n  Divider,\n  Drawer,\n  ListItem,\n  Menu,\n  MenuItem,\n  Typography,\n  useTheme,\n} from \"@material-ui/core\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport {\n  MultiwalletProvider,\n  useMultiwallet,\n  WalletPickerModal,\n  WalletPickerProps,\n} from \"@renproject/multiwallet-ui\";\nimport classNames from \"classnames\";\nimport React, {\n  FunctionComponent,\n  useCallback,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useDebounce, useWindowSize } from \"react-use\";\nimport { env } from \"../constants/environmentVariables\";\nimport { $renNetwork } from \"../features/network/networkSlice\";\nimport { useSetNetworkFromParam } from \"../features/network/networkUtils\";\nimport { AuthWarningDialog } from \"../features/transactions/components/TransactionsHelpers\";\nimport { TransactionHistory } from \"../features/transactions/TransactionHistory\";\nimport {\n  $transactionsData,\n  $transactionsNeedsAction,\n  setTxHistoryOpened,\n} from \"../features/transactions/transactionsSlice\";\nimport { useSubNetworkName } from \"../features/ui/uiHooks\";\nimport {\n  useAuthentication,\n  useSelectedChainWallet,\n  useSyncMultiwalletNetwork,\n  useWallet,\n  useWeb3Signatures,\n} from \"../features/wallet/walletHooks\";\nimport {\n  $authRequired,\n  $multiwalletChain,\n  $walletPickerOpened,\n  setWalletPickerOpened,\n} from \"../features/wallet/walletSlice\";\nimport { walletPickerModalConfig } from \"../providers/multiwallet/Multiwallet\";\nimport { TransactionHistoryMenuIconButton } from \"../components/buttons/Buttons\";\nimport { RenBridgeLogoIcon } from \"../components/icons/RenIcons\";\nimport { Debug } from \"../components/utils/Debug\";\nimport {\n  useWalletPickerStyles,\n  WalletChainLabel,\n  WalletConnectingInfo,\n  WalletConnectionStatusButton,\n  WalletEntryButton,\n  WalletWrongNetworkInfo,\n} from \"../components/wallet/WalletHelpers\";\nimport { Footer } from \"../components/layout/Footer\";\nimport {\n  MobileLayout,\n  MainLayoutVariantProps,\n  useMobileLayoutStyles,\n} from \"../components/layout/MobileLayout\";\n\nexport const MainLayout: FunctionComponent<MainLayoutVariantProps> = ({\n  children,\n}) => {\n  const styles = useMobileLayoutStyles();\n  const dispatch = useDispatch();\n  useSetNetworkFromParam();\n  useSyncMultiwalletNetwork();\n  useWeb3Signatures();\n  const {\n    authenticate,\n    isAuthenticated,\n    isAuthenticating,\n  } = useAuthentication();\n  const {\n    status,\n    account,\n    walletConnected,\n    deactivateConnector,\n    symbol,\n  } = useSelectedChainWallet();\n  const { txHistoryOpened } = useSelector($transactionsData);\n  const txsNeedsAction = useSelector($transactionsNeedsAction);\n\n  const authRequired = useSelector($authRequired);\n  const [authWarningOpened, setAuthWarningOpened] = useState(false);\n  useDebounce(\n    () => {\n      const shouldAuthWarningOpened =\n        walletConnected &&\n        !isAuthenticated &&\n        !isAuthenticating &&\n        (authRequired || txHistoryOpened);\n\n      setAuthWarningOpened(shouldAuthWarningOpened);\n    },\n    1000, // the authentication process takes a few seconds\n    [walletConnected, isAuthenticated, authRequired, txHistoryOpened]\n  );\n  // const authWarningOpened =\n  //   walletConnected && !isAuthenticated && (authRequired || txHistoryOpened);\n\n  const [mobileMenuOpen, setMobileMenuOpen] = useState(true);\n  const handleMobileMenuClose = useCallback(() => {\n    setMobileMenuOpen(false);\n  }, []);\n  const handleMobileMenuOpen = useCallback(() => {\n    setMobileMenuOpen(true);\n  }, []);\n  const { width } = useWindowSize();\n  const theme = useTheme();\n  useEffect(() => {\n    if (width > theme.breakpoints.values[\"sm\"]) {\n      setMobileMenuOpen(false);\n    }\n  }, [width, theme.breakpoints]);\n\n  const handleTxHistoryToggle = useCallback(() => {\n    dispatch(setTxHistoryOpened(!txHistoryOpened));\n  }, [dispatch, txHistoryOpened]);\n\n  const multiwalletChain = useSelector($multiwalletChain);\n  const walletPickerOpen = useSelector($walletPickerOpened);\n  const renNetwork = useSelector($renNetwork);\n  const pickerClasses = useWalletPickerStyles();\n  const [\n    walletMenuAnchor,\n    setWalletMenuAnchor,\n  ] = React.useState<null | HTMLElement>(null);\n  const handleWalletPickerClose = useCallback(() => {\n    dispatch(setWalletPickerOpened(false));\n  }, [dispatch]);\n  const handleWalletMenuClose = useCallback(() => {\n    setWalletMenuAnchor(null);\n  }, []);\n\n  const handleWalletButtonClick = useCallback(\n    (event: React.MouseEvent<HTMLElement>) => {\n      if (walletConnected) {\n        setWalletMenuAnchor(event.currentTarget);\n      } else {\n        dispatch(setWalletPickerOpened(true));\n      }\n    },\n    [dispatch, walletConnected]\n  );\n\n  const handleDisconnectWallet = useCallback(() => {\n    deactivateConnector();\n    handleWalletMenuClose();\n  }, [deactivateConnector, handleWalletMenuClose]);\n  const walletPickerOptions = useMemo(() => {\n    const options: WalletPickerProps<any, any> = {\n      targetNetwork: renNetwork,\n      chain: multiwalletChain,\n      onClose: handleWalletPickerClose,\n      pickerClasses,\n      // DefaultInfo: DebugComponentProps,\n      ConnectingInfo: WalletConnectingInfo,\n      WrongNetworkInfo: WalletWrongNetworkInfo,\n      WalletEntryButton,\n      WalletChainLabel,\n      config: walletPickerModalConfig,\n    };\n    return options;\n  }, [multiwalletChain, handleWalletPickerClose, pickerClasses, renNetwork]);\n\n  const debugWallet = useWallet(multiwalletChain); //remove\n  const debugMultiwallet = useMultiwallet(); //remove\n  const debugNetworkName = useSubNetworkName();\n\n  const drawerId = \"main-menu-mobile\";\n  const showTxIndicator = walletConnected && txsNeedsAction;\n\n  const ToolbarMenu = (\n    <>\n      <div className={styles.desktopMenu}>\n        <TransactionHistoryMenuIconButton\n          opened={txHistoryOpened}\n          indicator={showTxIndicator}\n          className={styles.desktopTxHistory}\n          onClick={handleTxHistoryToggle}\n        />\n        <WalletConnectionStatusButton\n          onClick={handleWalletButtonClick}\n          hoisted={txHistoryOpened}\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n        <WalletPickerModal\n          open={walletPickerOpen}\n          options={walletPickerOptions}\n        />\n      </div>\n      <div className={styles.mobileMenu}>\n        <IconButton\n          aria-label=\"show more\"\n          aria-controls={drawerId}\n          aria-haspopup=\"true\"\n          onClick={handleMobileMenuOpen}\n          color=\"inherit\"\n        >\n          <MenuIcon />\n        </IconButton>\n      </div>\n    </>\n  );\n  const DrawerMenu = (\n    <Drawer\n      anchor=\"right\"\n      id={drawerId}\n      keepMounted\n      open={mobileMenuOpen}\n      onClose={handleMobileMenuClose}\n      PaperProps={{ className: styles.drawerPaper }}\n    >\n      <div className={styles.drawerHeader}>\n        <RenBridgeLogoIcon className={styles.drawerLogo} />\n        <IconButton\n          aria-label=\"close\"\n          className={styles.drawerClose}\n          onClick={handleMobileMenuClose}\n        >\n          <CloseIcon />\n        </IconButton>\n      </div>\n      <Divider />\n      <ListItem\n        divider\n        className={styles.drawerListItem}\n        button\n        onClick={handleWalletButtonClick}\n      >\n        <WalletConnectionStatusButton\n          className={styles.mobileMenuButton}\n          mobile\n          status={status}\n          account={account}\n          wallet={symbol}\n        />\n      </ListItem>\n      <ListItem\n        divider\n        className={styles.drawerListItem}\n        button\n        onClick={handleTxHistoryToggle}\n      >\n        <Button className={styles.mobileMenuButton} component=\"div\">\n          <TransactionHistoryMenuIconButton\n            className={styles.mobileTxHistory}\n            indicator={showTxIndicator}\n          />\n          <span>View Transactions</span>\n        </Button>\n      </ListItem>\n      <ListItem\n        className={classNames(\n          styles.drawerListItem,\n          styles.drawerFooterListItem\n        )}\n      >\n        <Footer mobile />\n      </ListItem>\n    </Drawer>\n  );\n\n  const WalletMenu = (\n    <Menu\n      id=\"wallet-menu\"\n      getContentAnchorEl={null}\n      anchorEl={walletMenuAnchor}\n      keepMounted\n      open={Boolean(walletMenuAnchor)}\n      onClose={handleWalletMenuClose}\n      anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }}\n      transformOrigin={{ vertical: \"top\", horizontal: \"left\" }}\n    >\n      <MenuItem onClick={handleDisconnectWallet}>\n        <Typography color=\"error\">Disconnect wallet</Typography>\n      </MenuItem>\n    </Menu>\n  );\n  return (\n    <MobileLayout\n      ToolbarMenu={ToolbarMenu}\n      DrawerMenu={DrawerMenu}\n      WalletMenu={WalletMenu}\n    >\n      {children}\n      <TransactionHistory />\n      <AuthWarningDialog open={authWarningOpened} onMainAction={authenticate} />\n      <Debug\n        it={{\n          isAuthenticated,\n          debugNetworkName,\n          debugWallet,\n          debugMultiwallet,\n          env,\n        }}\n      />\n    </MobileLayout>\n  );\n};\n\nexport const ConnectedMainLayout: FunctionComponent = ({ children }) => (\n  <MultiwalletProvider>\n    <MainLayout>{children}</MainLayout>\n  </MultiwalletProvider>\n);\n","import React, { FunctionComponent } from 'react'\nimport { useSelector } from 'react-redux'\nimport { RouteComponentProps } from 'react-router'\nimport { Route } from 'react-router-dom'\nimport { BridgePaperWrapper, BridgePurePaper, } from '../components/layout/Paper'\nimport { storageKeys } from '../constants/constants'\nimport { useExchangeRates, useGasPrices, } from '../features/marketData/marketDataHooks'\nimport { MintFlow } from '../features/mint/MintFlow'\nimport { ReleaseFlow } from '../features/release/ReleaseFlow'\nimport { $ui } from '../features/ui/uiSlice'\nimport { PaperTitleProvider } from '../providers/TitleProviders'\nimport { ConnectedMainLayout } from './MainLayout'\nimport { paths } from './routes'\n\nconst MainPage: FunctionComponent<RouteComponentProps> = ({\n  history,\n  location,\n}) => {\n  if (!localStorage.getItem(storageKeys.TERMS_AGREED)) {\n    history.replace(paths.WELCOME);\n  }\n  if (location.pathname === \"/\") {\n    history.replace(paths.MINT);\n  }\n  useExchangeRates();\n  useGasPrices();\n  const { paperShaking } = useSelector($ui);\n  return (\n    <>\n      <ConnectedMainLayout>\n        <PaperTitleProvider>\n          <BridgePaperWrapper>\n            <BridgePurePaper shaking={paperShaking}>\n              <Route path={paths.MINT} component={MintFlow} />\n              <Route path={paths.RELEASE} component={ReleaseFlow} />\n            </BridgePurePaper>\n          </BridgePaperWrapper>\n        </PaperTitleProvider>\n      </ConnectedMainLayout>\n    </>\n  );\n};\n\nexport default MainPage;\n","import { useCallback, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useInterval } from \"react-use\";\nimport { BridgeChain } from \"../../utils/assetConfigs\";\nimport { setGasPrices, setExchangeRates } from \"./marketDataSlice\";\nimport {\n  fetchEthMarketDataGasPrices,\n  fetchMarketDataRates,\n} from \"./marketDataUtils\";\n\nconst dataRefreshInterval = 30; // seconds\n\nexport const useExchangeRates = () => {\n  const dispatch = useDispatch();\n\n  const fetchData = useCallback(() => {\n    fetchMarketDataRates().then((rates) => {\n      dispatch(setExchangeRates(rates));\n    });\n  }, [dispatch]);\n\n  useEffect(fetchData, []);\n  useInterval(fetchData, dataRefreshInterval * 1000);\n\n  return null;\n};\n\nexport const useGasPrices = () => {\n  const dispatch = useDispatch();\n\n  const fetchData = useCallback(() => {\n    fetchEthMarketDataGasPrices().then((anyBlockPrices) => {\n      const ethPrice = {\n        chain: BridgeChain.ETHC,\n        standard: anyBlockPrices.standard,\n      };\n      const bscPrice = {\n        chain: BridgeChain.BSCC,\n        standard: 20, // unable to find reliable source, but binance gas price is stable\n      };\n      const prices = [ethPrice, bscPrice];\n      dispatch(setGasPrices(prices));\n    });\n  }, [dispatch]);\n\n  useEffect(fetchData, []);\n\n  return null;\n};\n"],"sourceRoot":""}